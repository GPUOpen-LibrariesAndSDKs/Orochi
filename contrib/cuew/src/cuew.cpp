/*
 * Copyright 2011-2014 Blender Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */


#ifdef _MSC_VER
#  if _MSC_VER < 1900
#    define snprintf _snprintf
#  endif
#  define popen _popen
#  define pclose _pclose
#if !defined(_CRT_SECURE_NO_WARNINGS)
#  define _CRT_SECURE_NO_WARNINGS
#endif
#endif

#include <assert.h>
#include <contrib/cuew/include/cuew.h>
#include <stdio.h>
#include <string.h>
#include <sys/stat.h>


#ifdef OROCHI_CUEW_DEFINED


#ifdef _WIN32
#  define WIN32_LEAN_AND_MEAN
#  define VC_EXTRALEAN
#  include <windows.h>


typedef HMODULE DynamicLibrary;

#  define dynamic_library_open(path) LoadLibraryA(path)
#  define dynamic_library_close(lib) FreeLibrary(lib)
#  define dynamic_library_find(lib, symbol) GetProcAddress(lib, symbol)
#else
#  include <dlfcn.h>

typedef void *DynamicLibrary;

#  define dynamic_library_open(path) dlopen(path, RTLD_NOW)
#  define dynamic_library_close(lib) dlclose(lib)
#  define dynamic_library_find(lib, symbol) dlsym(lib, symbol)
#endif


#define _LIBRARY_FIND_CHECKED(lib, name) \
        name = (t##name *)dynamic_library_find(lib, #name); \
        assert(name);

#define _LIBRARY_FIND(lib, name)  name = (t##name *)dynamic_library_find(lib, #name);


static DynamicLibrary cuda_lib = NULL;
static DynamicLibrary cudart_lib = NULL;
static DynamicLibrary nvrtc_lib = NULL;





#pragma region OROCHI_SUMMONER_REGION_cuew_cpp_1

/////
///// THIS REGION HAS BEEN AUTOMATICALLY GENERATED BY OROCHI SUMMONER.
///// Manual modification of this region is not recommended.
/////

tcuArray3DCreate_v2 *cuArray3DCreate_v2;
tcuArray3DGetDescriptor_v2 *cuArray3DGetDescriptor_v2;
tcuArrayCreate_v2 *cuArrayCreate_v2;
tcuArrayDestroy *cuArrayDestroy;
tcuArrayGetDescriptor_v2 *cuArrayGetDescriptor_v2;
tcuArrayGetMemoryRequirements *cuArrayGetMemoryRequirements;
tcuArrayGetPlane *cuArrayGetPlane;
tcuArrayGetSparseProperties *cuArrayGetSparseProperties;
tcuCoredumpGetAttribute *cuCoredumpGetAttribute;
tcuCoredumpGetAttributeGlobal *cuCoredumpGetAttributeGlobal;
tcuCoredumpSetAttribute *cuCoredumpSetAttribute;
tcuCoredumpSetAttributeGlobal *cuCoredumpSetAttributeGlobal;
tcuCtxAttach *cuCtxAttach;
tcuCtxCreate_v2 *cuCtxCreate_v2;
tcuCtxCreate_v3 *cuCtxCreate_v3;
tcuCtxDestroy_v2 *cuCtxDestroy_v2;
tcuCtxDetach *cuCtxDetach;
tcuCtxDisablePeerAccess *cuCtxDisablePeerAccess;
tcuCtxEnablePeerAccess *cuCtxEnablePeerAccess;
tcuCtxGetApiVersion *cuCtxGetApiVersion;
tcuCtxGetCacheConfig *cuCtxGetCacheConfig;
tcuCtxGetCurrent *cuCtxGetCurrent;
tcuCtxGetDevice *cuCtxGetDevice;
tcuCtxGetExecAffinity *cuCtxGetExecAffinity;
tcuCtxGetFlags *cuCtxGetFlags;
tcuCtxGetId *cuCtxGetId;
tcuCtxGetLimit *cuCtxGetLimit;
tcuCtxGetSharedMemConfig *cuCtxGetSharedMemConfig;
tcuCtxGetStreamPriorityRange *cuCtxGetStreamPriorityRange;
tcuCtxPopCurrent_v2 *cuCtxPopCurrent_v2;
tcuCtxPushCurrent_v2 *cuCtxPushCurrent_v2;
tcuCtxResetPersistingL2Cache *cuCtxResetPersistingL2Cache;
tcuCtxSetCacheConfig *cuCtxSetCacheConfig;
tcuCtxSetCurrent *cuCtxSetCurrent;
tcuCtxSetFlags *cuCtxSetFlags;
tcuCtxSetLimit *cuCtxSetLimit;
tcuCtxSetSharedMemConfig *cuCtxSetSharedMemConfig;
tcuCtxSynchronize *cuCtxSynchronize;
tcuDestroyExternalMemory *cuDestroyExternalMemory;
tcuDestroyExternalSemaphore *cuDestroyExternalSemaphore;
tcuDeviceCanAccessPeer *cuDeviceCanAccessPeer;
tcuDeviceComputeCapability *cuDeviceComputeCapability;
tcuDeviceGet *cuDeviceGet;
tcuDeviceGetAttribute *cuDeviceGetAttribute;
tcuDeviceGetByPCIBusId *cuDeviceGetByPCIBusId;
tcuDeviceGetCount *cuDeviceGetCount;
tcuDeviceGetDefaultMemPool *cuDeviceGetDefaultMemPool;
tcuDeviceGetExecAffinitySupport *cuDeviceGetExecAffinitySupport;
tcuDeviceGetGraphMemAttribute *cuDeviceGetGraphMemAttribute;
tcuDeviceGetLuid *cuDeviceGetLuid;
tcuDeviceGetMemPool *cuDeviceGetMemPool;
tcuDeviceGetName *cuDeviceGetName;
tcuDeviceGetNvSciSyncAttributes *cuDeviceGetNvSciSyncAttributes;
tcuDeviceGetP2PAttribute *cuDeviceGetP2PAttribute;
tcuDeviceGetPCIBusId *cuDeviceGetPCIBusId;
tcuDeviceGetProperties *cuDeviceGetProperties;
tcuDeviceGetTexture1DLinearMaxWidth *cuDeviceGetTexture1DLinearMaxWidth;
tcuDeviceGetUuid *cuDeviceGetUuid;
tcuDeviceGetUuid_v2 *cuDeviceGetUuid_v2;
tcuDeviceGraphMemTrim *cuDeviceGraphMemTrim;
tcuDevicePrimaryCtxGetState *cuDevicePrimaryCtxGetState;
tcuDevicePrimaryCtxRelease_v2 *cuDevicePrimaryCtxRelease_v2;
tcuDevicePrimaryCtxReset_v2 *cuDevicePrimaryCtxReset_v2;
tcuDevicePrimaryCtxRetain *cuDevicePrimaryCtxRetain;
tcuDevicePrimaryCtxSetFlags_v2 *cuDevicePrimaryCtxSetFlags_v2;
tcuDeviceSetGraphMemAttribute *cuDeviceSetGraphMemAttribute;
tcuDeviceSetMemPool *cuDeviceSetMemPool;
tcuDeviceTotalMem_v2 *cuDeviceTotalMem_v2;
tcuDriverGetVersion *cuDriverGetVersion;
tcuEventCreate *cuEventCreate;
tcuEventDestroy_v2 *cuEventDestroy_v2;
tcuEventElapsedTime *cuEventElapsedTime;
tcuEventQuery *cuEventQuery;
tcuEventRecord *cuEventRecord;
tcuEventRecordWithFlags *cuEventRecordWithFlags;
tcuEventSynchronize *cuEventSynchronize;
tcuExternalMemoryGetMappedBuffer *cuExternalMemoryGetMappedBuffer;
tcuExternalMemoryGetMappedMipmappedArray *cuExternalMemoryGetMappedMipmappedArray;
tcuFlushGPUDirectRDMAWrites *cuFlushGPUDirectRDMAWrites;
tcuFuncGetAttribute *cuFuncGetAttribute;
tcuFuncGetModule *cuFuncGetModule;
tcuFuncSetAttribute *cuFuncSetAttribute;
tcuFuncSetBlockShape *cuFuncSetBlockShape;
tcuFuncSetCacheConfig *cuFuncSetCacheConfig;
tcuFuncSetSharedMemConfig *cuFuncSetSharedMemConfig;
tcuFuncSetSharedSize *cuFuncSetSharedSize;
tcuGetErrorName *cuGetErrorName;
tcuGetErrorString *cuGetErrorString;
tcuGetExportTable *cuGetExportTable;
tcuGetProcAddress_v2 *cuGetProcAddress_v2;
tcuGraphAddBatchMemOpNode *cuGraphAddBatchMemOpNode;
tcuGraphAddChildGraphNode *cuGraphAddChildGraphNode;
tcuGraphAddDependencies *cuGraphAddDependencies;
tcuGraphAddEmptyNode *cuGraphAddEmptyNode;
tcuGraphAddEventRecordNode *cuGraphAddEventRecordNode;
tcuGraphAddEventWaitNode *cuGraphAddEventWaitNode;
tcuGraphAddExternalSemaphoresSignalNode *cuGraphAddExternalSemaphoresSignalNode;
tcuGraphAddExternalSemaphoresWaitNode *cuGraphAddExternalSemaphoresWaitNode;
tcuGraphAddHostNode *cuGraphAddHostNode;
tcuGraphAddKernelNode_v2 *cuGraphAddKernelNode_v2;
tcuGraphAddMemAllocNode *cuGraphAddMemAllocNode;
tcuGraphAddMemFreeNode *cuGraphAddMemFreeNode;
tcuGraphAddMemcpyNode *cuGraphAddMemcpyNode;
tcuGraphAddMemsetNode *cuGraphAddMemsetNode;
tcuGraphAddNode *cuGraphAddNode;
tcuGraphBatchMemOpNodeGetParams *cuGraphBatchMemOpNodeGetParams;
tcuGraphBatchMemOpNodeSetParams *cuGraphBatchMemOpNodeSetParams;
tcuGraphChildGraphNodeGetGraph *cuGraphChildGraphNodeGetGraph;
tcuGraphClone *cuGraphClone;
tcuGraphCreate *cuGraphCreate;
tcuGraphDebugDotPrint *cuGraphDebugDotPrint;
tcuGraphDestroy *cuGraphDestroy;
tcuGraphDestroyNode *cuGraphDestroyNode;
tcuGraphEventRecordNodeGetEvent *cuGraphEventRecordNodeGetEvent;
tcuGraphEventRecordNodeSetEvent *cuGraphEventRecordNodeSetEvent;
tcuGraphEventWaitNodeGetEvent *cuGraphEventWaitNodeGetEvent;
tcuGraphEventWaitNodeSetEvent *cuGraphEventWaitNodeSetEvent;
tcuGraphExecBatchMemOpNodeSetParams *cuGraphExecBatchMemOpNodeSetParams;
tcuGraphExecChildGraphNodeSetParams *cuGraphExecChildGraphNodeSetParams;
tcuGraphExecDestroy *cuGraphExecDestroy;
tcuGraphExecEventRecordNodeSetEvent *cuGraphExecEventRecordNodeSetEvent;
tcuGraphExecEventWaitNodeSetEvent *cuGraphExecEventWaitNodeSetEvent;
tcuGraphExecExternalSemaphoresSignalNodeSetParams *cuGraphExecExternalSemaphoresSignalNodeSetParams;
tcuGraphExecExternalSemaphoresWaitNodeSetParams *cuGraphExecExternalSemaphoresWaitNodeSetParams;
tcuGraphExecGetFlags *cuGraphExecGetFlags;
tcuGraphExecHostNodeSetParams *cuGraphExecHostNodeSetParams;
tcuGraphExecKernelNodeSetParams_v2 *cuGraphExecKernelNodeSetParams_v2;
tcuGraphExecMemcpyNodeSetParams *cuGraphExecMemcpyNodeSetParams;
tcuGraphExecMemsetNodeSetParams *cuGraphExecMemsetNodeSetParams;
tcuGraphExecNodeSetParams *cuGraphExecNodeSetParams;
tcuGraphExecUpdate_v2 *cuGraphExecUpdate_v2;
tcuGraphExternalSemaphoresSignalNodeGetParams *cuGraphExternalSemaphoresSignalNodeGetParams;
tcuGraphExternalSemaphoresSignalNodeSetParams *cuGraphExternalSemaphoresSignalNodeSetParams;
tcuGraphExternalSemaphoresWaitNodeGetParams *cuGraphExternalSemaphoresWaitNodeGetParams;
tcuGraphExternalSemaphoresWaitNodeSetParams *cuGraphExternalSemaphoresWaitNodeSetParams;
tcuGraphGetEdges *cuGraphGetEdges;
tcuGraphGetNodes *cuGraphGetNodes;
tcuGraphGetRootNodes *cuGraphGetRootNodes;
tcuGraphHostNodeGetParams *cuGraphHostNodeGetParams;
tcuGraphHostNodeSetParams *cuGraphHostNodeSetParams;
tcuGraphInstantiateWithFlags *cuGraphInstantiateWithFlags;
tcuGraphInstantiateWithParams *cuGraphInstantiateWithParams;
tcuGraphKernelNodeCopyAttributes *cuGraphKernelNodeCopyAttributes;
tcuGraphKernelNodeGetAttribute *cuGraphKernelNodeGetAttribute;
tcuGraphKernelNodeGetParams_v2 *cuGraphKernelNodeGetParams_v2;
tcuGraphKernelNodeSetAttribute *cuGraphKernelNodeSetAttribute;
tcuGraphKernelNodeSetParams_v2 *cuGraphKernelNodeSetParams_v2;
tcuGraphLaunch *cuGraphLaunch;
tcuGraphMemAllocNodeGetParams *cuGraphMemAllocNodeGetParams;
tcuGraphMemFreeNodeGetParams *cuGraphMemFreeNodeGetParams;
tcuGraphMemcpyNodeGetParams *cuGraphMemcpyNodeGetParams;
tcuGraphMemcpyNodeSetParams *cuGraphMemcpyNodeSetParams;
tcuGraphMemsetNodeGetParams *cuGraphMemsetNodeGetParams;
tcuGraphMemsetNodeSetParams *cuGraphMemsetNodeSetParams;
tcuGraphNodeFindInClone *cuGraphNodeFindInClone;
tcuGraphNodeGetDependencies *cuGraphNodeGetDependencies;
tcuGraphNodeGetDependentNodes *cuGraphNodeGetDependentNodes;
tcuGraphNodeGetEnabled *cuGraphNodeGetEnabled;
tcuGraphNodeGetType *cuGraphNodeGetType;
tcuGraphNodeSetEnabled *cuGraphNodeSetEnabled;
tcuGraphNodeSetParams *cuGraphNodeSetParams;
tcuGraphReleaseUserObject *cuGraphReleaseUserObject;
tcuGraphRemoveDependencies *cuGraphRemoveDependencies;
tcuGraphRetainUserObject *cuGraphRetainUserObject;
tcuGraphUpload *cuGraphUpload;
tcuGraphicsMapResources *cuGraphicsMapResources;
tcuGraphicsResourceGetMappedMipmappedArray *cuGraphicsResourceGetMappedMipmappedArray;
tcuGraphicsResourceGetMappedPointer_v2 *cuGraphicsResourceGetMappedPointer_v2;
tcuGraphicsResourceSetMapFlags_v2 *cuGraphicsResourceSetMapFlags_v2;
tcuGraphicsSubResourceGetMappedArray *cuGraphicsSubResourceGetMappedArray;
tcuGraphicsUnmapResources *cuGraphicsUnmapResources;
tcuGraphicsUnregisterResource *cuGraphicsUnregisterResource;
tcuImportExternalMemory *cuImportExternalMemory;
tcuImportExternalSemaphore *cuImportExternalSemaphore;
tcuInit *cuInit;
tcuIpcCloseMemHandle *cuIpcCloseMemHandle;
tcuIpcGetEventHandle *cuIpcGetEventHandle;
tcuIpcGetMemHandle *cuIpcGetMemHandle;
tcuIpcOpenEventHandle *cuIpcOpenEventHandle;
tcuIpcOpenMemHandle_v2 *cuIpcOpenMemHandle_v2;
tcuKernelGetAttribute *cuKernelGetAttribute;
tcuKernelGetFunction *cuKernelGetFunction;
tcuKernelSetAttribute *cuKernelSetAttribute;
tcuKernelSetCacheConfig *cuKernelSetCacheConfig;
tcuLaunch *cuLaunch;
tcuLaunchCooperativeKernel *cuLaunchCooperativeKernel;
tcuLaunchCooperativeKernelMultiDevice *cuLaunchCooperativeKernelMultiDevice;
tcuLaunchGrid *cuLaunchGrid;
tcuLaunchGridAsync *cuLaunchGridAsync;
tcuLaunchHostFunc *cuLaunchHostFunc;
tcuLaunchKernel *cuLaunchKernel;
tcuLaunchKernelEx *cuLaunchKernelEx;
tcuLibraryGetGlobal *cuLibraryGetGlobal;
tcuLibraryGetKernel *cuLibraryGetKernel;
tcuLibraryGetManaged *cuLibraryGetManaged;
tcuLibraryGetModule *cuLibraryGetModule;
tcuLibraryGetUnifiedFunction *cuLibraryGetUnifiedFunction;
tcuLibraryLoadData *cuLibraryLoadData;
tcuLibraryLoadFromFile *cuLibraryLoadFromFile;
tcuLibraryUnload *cuLibraryUnload;
tcuLinkAddData_v2 *cuLinkAddData_v2;
tcuLinkAddFile_v2 *cuLinkAddFile_v2;
tcuLinkComplete *cuLinkComplete;
tcuLinkCreate_v2 *cuLinkCreate_v2;
tcuLinkDestroy *cuLinkDestroy;
tcuMemAddressFree *cuMemAddressFree;
tcuMemAddressReserve *cuMemAddressReserve;
tcuMemAdvise *cuMemAdvise;
tcuMemAdvise_v2 *cuMemAdvise_v2;
tcuMemAllocAsync *cuMemAllocAsync;
tcuMemAllocFromPoolAsync *cuMemAllocFromPoolAsync;
tcuMemAllocHost_v2 *cuMemAllocHost_v2;
tcuMemAllocManaged *cuMemAllocManaged;
tcuMemAllocPitch_v2 *cuMemAllocPitch_v2;
tcuMemAlloc_v2 *cuMemAlloc_v2;
tcuMemCreate *cuMemCreate;
tcuMemExportToShareableHandle *cuMemExportToShareableHandle;
tcuMemFreeAsync *cuMemFreeAsync;
tcuMemFreeHost *cuMemFreeHost;
tcuMemFree_v2 *cuMemFree_v2;
tcuMemGetAccess *cuMemGetAccess;
tcuMemGetAddressRange_v2 *cuMemGetAddressRange_v2;
tcuMemGetAllocationGranularity *cuMemGetAllocationGranularity;
tcuMemGetAllocationPropertiesFromHandle *cuMemGetAllocationPropertiesFromHandle;
tcuMemGetHandleForAddressRange *cuMemGetHandleForAddressRange;
tcuMemGetInfo_v2 *cuMemGetInfo_v2;
tcuMemHostAlloc *cuMemHostAlloc;
tcuMemHostGetDevicePointer_v2 *cuMemHostGetDevicePointer_v2;
tcuMemHostGetFlags *cuMemHostGetFlags;
tcuMemHostRegister_v2 *cuMemHostRegister_v2;
tcuMemHostUnregister *cuMemHostUnregister;
tcuMemImportFromShareableHandle *cuMemImportFromShareableHandle;
tcuMemMap *cuMemMap;
tcuMemMapArrayAsync *cuMemMapArrayAsync;
tcuMemPoolCreate *cuMemPoolCreate;
tcuMemPoolDestroy *cuMemPoolDestroy;
tcuMemPoolExportPointer *cuMemPoolExportPointer;
tcuMemPoolExportToShareableHandle *cuMemPoolExportToShareableHandle;
tcuMemPoolGetAccess *cuMemPoolGetAccess;
tcuMemPoolGetAttribute *cuMemPoolGetAttribute;
tcuMemPoolImportFromShareableHandle *cuMemPoolImportFromShareableHandle;
tcuMemPoolImportPointer *cuMemPoolImportPointer;
tcuMemPoolSetAccess *cuMemPoolSetAccess;
tcuMemPoolSetAttribute *cuMemPoolSetAttribute;
tcuMemPoolTrimTo *cuMemPoolTrimTo;
tcuMemPrefetchAsync *cuMemPrefetchAsync;
tcuMemPrefetchAsync_v2 *cuMemPrefetchAsync_v2;
tcuMemRangeGetAttribute *cuMemRangeGetAttribute;
tcuMemRangeGetAttributes *cuMemRangeGetAttributes;
tcuMemRelease *cuMemRelease;
tcuMemRetainAllocationHandle *cuMemRetainAllocationHandle;
tcuMemSetAccess *cuMemSetAccess;
tcuMemUnmap *cuMemUnmap;
tcuMemcpy *cuMemcpy;
tcuMemcpy2DAsync_v2 *cuMemcpy2DAsync_v2;
tcuMemcpy2DUnaligned_v2 *cuMemcpy2DUnaligned_v2;
tcuMemcpy2D_v2 *cuMemcpy2D_v2;
tcuMemcpy3DAsync_v2 *cuMemcpy3DAsync_v2;
tcuMemcpy3DPeer *cuMemcpy3DPeer;
tcuMemcpy3DPeerAsync *cuMemcpy3DPeerAsync;
tcuMemcpy3D_v2 *cuMemcpy3D_v2;
tcuMemcpyAsync *cuMemcpyAsync;
tcuMemcpyAtoA_v2 *cuMemcpyAtoA_v2;
tcuMemcpyAtoD_v2 *cuMemcpyAtoD_v2;
tcuMemcpyAtoHAsync_v2 *cuMemcpyAtoHAsync_v2;
tcuMemcpyAtoH_v2 *cuMemcpyAtoH_v2;
tcuMemcpyDtoA_v2 *cuMemcpyDtoA_v2;
tcuMemcpyDtoDAsync_v2 *cuMemcpyDtoDAsync_v2;
tcuMemcpyDtoD_v2 *cuMemcpyDtoD_v2;
tcuMemcpyDtoHAsync_v2 *cuMemcpyDtoHAsync_v2;
tcuMemcpyDtoH_v2 *cuMemcpyDtoH_v2;
tcuMemcpyHtoAAsync_v2 *cuMemcpyHtoAAsync_v2;
tcuMemcpyHtoA_v2 *cuMemcpyHtoA_v2;
tcuMemcpyHtoDAsync_v2 *cuMemcpyHtoDAsync_v2;
tcuMemcpyHtoD_v2 *cuMemcpyHtoD_v2;
tcuMemcpyPeer *cuMemcpyPeer;
tcuMemcpyPeerAsync *cuMemcpyPeerAsync;
tcuMemsetD16Async *cuMemsetD16Async;
tcuMemsetD16_v2 *cuMemsetD16_v2;
tcuMemsetD2D16Async *cuMemsetD2D16Async;
tcuMemsetD2D16_v2 *cuMemsetD2D16_v2;
tcuMemsetD2D32Async *cuMemsetD2D32Async;
tcuMemsetD2D32_v2 *cuMemsetD2D32_v2;
tcuMemsetD2D8Async *cuMemsetD2D8Async;
tcuMemsetD2D8_v2 *cuMemsetD2D8_v2;
tcuMemsetD32Async *cuMemsetD32Async;
tcuMemsetD32_v2 *cuMemsetD32_v2;
tcuMemsetD8Async *cuMemsetD8Async;
tcuMemsetD8_v2 *cuMemsetD8_v2;
tcuMipmappedArrayCreate *cuMipmappedArrayCreate;
tcuMipmappedArrayDestroy *cuMipmappedArrayDestroy;
tcuMipmappedArrayGetLevel *cuMipmappedArrayGetLevel;
tcuMipmappedArrayGetMemoryRequirements *cuMipmappedArrayGetMemoryRequirements;
tcuMipmappedArrayGetSparseProperties *cuMipmappedArrayGetSparseProperties;
tcuModuleGetFunction *cuModuleGetFunction;
tcuModuleGetGlobal_v2 *cuModuleGetGlobal_v2;
tcuModuleGetLoadingMode *cuModuleGetLoadingMode;
tcuModuleGetSurfRef *cuModuleGetSurfRef;
tcuModuleGetTexRef *cuModuleGetTexRef;
tcuModuleLoad *cuModuleLoad;
tcuModuleLoadData *cuModuleLoadData;
tcuModuleLoadDataEx *cuModuleLoadDataEx;
tcuModuleLoadFatBinary *cuModuleLoadFatBinary;
tcuModuleUnload *cuModuleUnload;
tcuMulticastAddDevice *cuMulticastAddDevice;
tcuMulticastBindAddr *cuMulticastBindAddr;
tcuMulticastBindMem *cuMulticastBindMem;
tcuMulticastCreate *cuMulticastCreate;
tcuMulticastGetGranularity *cuMulticastGetGranularity;
tcuMulticastUnbind *cuMulticastUnbind;
tcuOccupancyAvailableDynamicSMemPerBlock *cuOccupancyAvailableDynamicSMemPerBlock;
tcuOccupancyMaxActiveBlocksPerMultiprocessor *cuOccupancyMaxActiveBlocksPerMultiprocessor;
tcuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags *cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags;
tcuOccupancyMaxActiveClusters *cuOccupancyMaxActiveClusters;
tcuOccupancyMaxPotentialBlockSize *cuOccupancyMaxPotentialBlockSize;
tcuOccupancyMaxPotentialBlockSizeWithFlags *cuOccupancyMaxPotentialBlockSizeWithFlags;
tcuOccupancyMaxPotentialClusterSize *cuOccupancyMaxPotentialClusterSize;
tcuParamSetSize *cuParamSetSize;
tcuParamSetTexRef *cuParamSetTexRef;
tcuParamSetf *cuParamSetf;
tcuParamSeti *cuParamSeti;
tcuParamSetv *cuParamSetv;
tcuPointerGetAttribute *cuPointerGetAttribute;
tcuPointerGetAttributes *cuPointerGetAttributes;
tcuPointerSetAttribute *cuPointerSetAttribute;
tcuSignalExternalSemaphoresAsync *cuSignalExternalSemaphoresAsync;
tcuStreamAddCallback *cuStreamAddCallback;
tcuStreamAttachMemAsync *cuStreamAttachMemAsync;
tcuStreamBatchMemOp_v2 *cuStreamBatchMemOp_v2;
tcuStreamBeginCapture_v2 *cuStreamBeginCapture_v2;
tcuStreamCopyAttributes *cuStreamCopyAttributes;
tcuStreamCreate *cuStreamCreate;
tcuStreamCreateWithPriority *cuStreamCreateWithPriority;
tcuStreamDestroy_v2 *cuStreamDestroy_v2;
tcuStreamEndCapture *cuStreamEndCapture;
tcuStreamGetAttribute *cuStreamGetAttribute;
tcuStreamGetCaptureInfo_v2 *cuStreamGetCaptureInfo_v2;
tcuStreamGetCtx *cuStreamGetCtx;
tcuStreamGetFlags *cuStreamGetFlags;
tcuStreamGetId *cuStreamGetId;
tcuStreamGetPriority *cuStreamGetPriority;
tcuStreamIsCapturing *cuStreamIsCapturing;
tcuStreamQuery *cuStreamQuery;
tcuStreamSetAttribute *cuStreamSetAttribute;
tcuStreamSynchronize *cuStreamSynchronize;
tcuStreamUpdateCaptureDependencies *cuStreamUpdateCaptureDependencies;
tcuStreamWaitEvent *cuStreamWaitEvent;
tcuStreamWaitValue32_v2 *cuStreamWaitValue32_v2;
tcuStreamWaitValue64_v2 *cuStreamWaitValue64_v2;
tcuStreamWriteValue32_v2 *cuStreamWriteValue32_v2;
tcuStreamWriteValue64_v2 *cuStreamWriteValue64_v2;
tcuSurfObjectCreate *cuSurfObjectCreate;
tcuSurfObjectDestroy *cuSurfObjectDestroy;
tcuSurfObjectGetResourceDesc *cuSurfObjectGetResourceDesc;
tcuSurfRefGetArray *cuSurfRefGetArray;
tcuSurfRefSetArray *cuSurfRefSetArray;
tcuTensorMapEncodeIm2col *cuTensorMapEncodeIm2col;
tcuTensorMapEncodeTiled *cuTensorMapEncodeTiled;
tcuTensorMapReplaceAddress *cuTensorMapReplaceAddress;
tcuTexObjectCreate *cuTexObjectCreate;
tcuTexObjectDestroy *cuTexObjectDestroy;
tcuTexObjectGetResourceDesc *cuTexObjectGetResourceDesc;
tcuTexObjectGetResourceViewDesc *cuTexObjectGetResourceViewDesc;
tcuTexObjectGetTextureDesc *cuTexObjectGetTextureDesc;
tcuTexRefCreate *cuTexRefCreate;
tcuTexRefDestroy *cuTexRefDestroy;
tcuTexRefGetAddressMode *cuTexRefGetAddressMode;
tcuTexRefGetAddress_v2 *cuTexRefGetAddress_v2;
tcuTexRefGetArray *cuTexRefGetArray;
tcuTexRefGetBorderColor *cuTexRefGetBorderColor;
tcuTexRefGetFilterMode *cuTexRefGetFilterMode;
tcuTexRefGetFlags *cuTexRefGetFlags;
tcuTexRefGetFormat *cuTexRefGetFormat;
tcuTexRefGetMaxAnisotropy *cuTexRefGetMaxAnisotropy;
tcuTexRefGetMipmapFilterMode *cuTexRefGetMipmapFilterMode;
tcuTexRefGetMipmapLevelBias *cuTexRefGetMipmapLevelBias;
tcuTexRefGetMipmapLevelClamp *cuTexRefGetMipmapLevelClamp;
tcuTexRefGetMipmappedArray *cuTexRefGetMipmappedArray;
tcuTexRefSetAddress2D_v3 *cuTexRefSetAddress2D_v3;
tcuTexRefSetAddressMode *cuTexRefSetAddressMode;
tcuTexRefSetAddress_v2 *cuTexRefSetAddress_v2;
tcuTexRefSetArray *cuTexRefSetArray;
tcuTexRefSetBorderColor *cuTexRefSetBorderColor;
tcuTexRefSetFilterMode *cuTexRefSetFilterMode;
tcuTexRefSetFlags *cuTexRefSetFlags;
tcuTexRefSetFormat *cuTexRefSetFormat;
tcuTexRefSetMaxAnisotropy *cuTexRefSetMaxAnisotropy;
tcuTexRefSetMipmapFilterMode *cuTexRefSetMipmapFilterMode;
tcuTexRefSetMipmapLevelBias *cuTexRefSetMipmapLevelBias;
tcuTexRefSetMipmapLevelClamp *cuTexRefSetMipmapLevelClamp;
tcuTexRefSetMipmappedArray *cuTexRefSetMipmappedArray;
tcuThreadExchangeStreamCaptureMode *cuThreadExchangeStreamCaptureMode;
tcuUserObjectCreate *cuUserObjectCreate;
tcuUserObjectRelease *cuUserObjectRelease;
tcuUserObjectRetain *cuUserObjectRetain;
tcuWaitExternalSemaphoresAsync *cuWaitExternalSemaphoresAsync;
tcudaArrayGetInfo *cudaArrayGetInfo;
tcudaArrayGetMemoryRequirements *cudaArrayGetMemoryRequirements;
tcudaArrayGetPlane *cudaArrayGetPlane;
tcudaArrayGetSparseProperties *cudaArrayGetSparseProperties;
tcudaChooseDevice *cudaChooseDevice;
tcudaCreateChannelDesc *cudaCreateChannelDesc;
tcudaCreateSurfaceObject *cudaCreateSurfaceObject;
tcudaCreateTextureObject *cudaCreateTextureObject;
tcudaCtxResetPersistingL2Cache *cudaCtxResetPersistingL2Cache;
tcudaDestroyExternalMemory *cudaDestroyExternalMemory;
tcudaDestroyExternalSemaphore *cudaDestroyExternalSemaphore;
tcudaDestroySurfaceObject *cudaDestroySurfaceObject;
tcudaDestroyTextureObject *cudaDestroyTextureObject;
tcudaDeviceCanAccessPeer *cudaDeviceCanAccessPeer;
tcudaDeviceDisablePeerAccess *cudaDeviceDisablePeerAccess;
tcudaDeviceEnablePeerAccess *cudaDeviceEnablePeerAccess;
tcudaDeviceFlushGPUDirectRDMAWrites *cudaDeviceFlushGPUDirectRDMAWrites;
tcudaDeviceGetAttribute *cudaDeviceGetAttribute;
tcudaDeviceGetByPCIBusId *cudaDeviceGetByPCIBusId;
tcudaDeviceGetCacheConfig *cudaDeviceGetCacheConfig;
tcudaDeviceGetDefaultMemPool *cudaDeviceGetDefaultMemPool;
tcudaDeviceGetGraphMemAttribute *cudaDeviceGetGraphMemAttribute;
tcudaDeviceGetLimit *cudaDeviceGetLimit;
tcudaDeviceGetMemPool *cudaDeviceGetMemPool;
tcudaDeviceGetNvSciSyncAttributes *cudaDeviceGetNvSciSyncAttributes;
tcudaDeviceGetP2PAttribute *cudaDeviceGetP2PAttribute;
tcudaDeviceGetPCIBusId *cudaDeviceGetPCIBusId;
tcudaDeviceGetSharedMemConfig *cudaDeviceGetSharedMemConfig;
tcudaDeviceGetStreamPriorityRange *cudaDeviceGetStreamPriorityRange;
tcudaDeviceGetTexture1DLinearMaxWidth *cudaDeviceGetTexture1DLinearMaxWidth;
tcudaDeviceGraphMemTrim *cudaDeviceGraphMemTrim;
tcudaDeviceReset *cudaDeviceReset;
tcudaDeviceSetCacheConfig *cudaDeviceSetCacheConfig;
tcudaDeviceSetGraphMemAttribute *cudaDeviceSetGraphMemAttribute;
tcudaDeviceSetLimit *cudaDeviceSetLimit;
tcudaDeviceSetMemPool *cudaDeviceSetMemPool;
tcudaDeviceSetSharedMemConfig *cudaDeviceSetSharedMemConfig;
tcudaDeviceSynchronize *cudaDeviceSynchronize;
tcudaDriverGetVersion *cudaDriverGetVersion;
tcudaEventCreate *cudaEventCreate;
tcudaEventCreateWithFlags *cudaEventCreateWithFlags;
tcudaEventDestroy *cudaEventDestroy;
tcudaEventElapsedTime *cudaEventElapsedTime;
tcudaEventQuery *cudaEventQuery;
tcudaEventRecord *cudaEventRecord;
tcudaEventRecordWithFlags *cudaEventRecordWithFlags;
tcudaEventSynchronize *cudaEventSynchronize;
tcudaExternalMemoryGetMappedBuffer *cudaExternalMemoryGetMappedBuffer;
tcudaExternalMemoryGetMappedMipmappedArray *cudaExternalMemoryGetMappedMipmappedArray;
tcudaFree *cudaFree;
tcudaFreeArray *cudaFreeArray;
tcudaFreeAsync *cudaFreeAsync;
tcudaFreeHost *cudaFreeHost;
tcudaFreeMipmappedArray *cudaFreeMipmappedArray;
tcudaFuncGetAttributes *cudaFuncGetAttributes;
tcudaFuncSetAttribute *cudaFuncSetAttribute;
tcudaFuncSetCacheConfig *cudaFuncSetCacheConfig;
tcudaFuncSetSharedMemConfig *cudaFuncSetSharedMemConfig;
tcudaGetChannelDesc *cudaGetChannelDesc;
tcudaGetDevice *cudaGetDevice;
tcudaGetDeviceCount *cudaGetDeviceCount;
tcudaGetDeviceFlags *cudaGetDeviceFlags;
tcudaGetDeviceProperties_v2 *cudaGetDeviceProperties_v2;
tcudaGetDriverEntryPoint *cudaGetDriverEntryPoint;
tcudaGetErrorName *cudaGetErrorName;
tcudaGetErrorString *cudaGetErrorString;
tcudaGetExportTable *cudaGetExportTable;
tcudaGetFuncBySymbol *cudaGetFuncBySymbol;
tcudaGetKernel *cudaGetKernel;
tcudaGetLastError *cudaGetLastError;
tcudaGetMipmappedArrayLevel *cudaGetMipmappedArrayLevel;
tcudaGetSurfaceObjectResourceDesc *cudaGetSurfaceObjectResourceDesc;
tcudaGetSymbolAddress *cudaGetSymbolAddress;
tcudaGetSymbolSize *cudaGetSymbolSize;
tcudaGetTextureObjectResourceDesc *cudaGetTextureObjectResourceDesc;
tcudaGetTextureObjectResourceViewDesc *cudaGetTextureObjectResourceViewDesc;
tcudaGetTextureObjectTextureDesc *cudaGetTextureObjectTextureDesc;
tcudaGraphAddChildGraphNode *cudaGraphAddChildGraphNode;
tcudaGraphAddDependencies *cudaGraphAddDependencies;
tcudaGraphAddEmptyNode *cudaGraphAddEmptyNode;
tcudaGraphAddEventRecordNode *cudaGraphAddEventRecordNode;
tcudaGraphAddEventWaitNode *cudaGraphAddEventWaitNode;
tcudaGraphAddExternalSemaphoresSignalNode *cudaGraphAddExternalSemaphoresSignalNode;
tcudaGraphAddExternalSemaphoresWaitNode *cudaGraphAddExternalSemaphoresWaitNode;
tcudaGraphAddHostNode *cudaGraphAddHostNode;
tcudaGraphAddKernelNode *cudaGraphAddKernelNode;
tcudaGraphAddMemAllocNode *cudaGraphAddMemAllocNode;
tcudaGraphAddMemFreeNode *cudaGraphAddMemFreeNode;
tcudaGraphAddMemcpyNode *cudaGraphAddMemcpyNode;
tcudaGraphAddMemcpyNode1D *cudaGraphAddMemcpyNode1D;
tcudaGraphAddMemcpyNodeFromSymbol *cudaGraphAddMemcpyNodeFromSymbol;
tcudaGraphAddMemcpyNodeToSymbol *cudaGraphAddMemcpyNodeToSymbol;
tcudaGraphAddMemsetNode *cudaGraphAddMemsetNode;
tcudaGraphAddNode *cudaGraphAddNode;
tcudaGraphChildGraphNodeGetGraph *cudaGraphChildGraphNodeGetGraph;
tcudaGraphClone *cudaGraphClone;
tcudaGraphCreate *cudaGraphCreate;
tcudaGraphDebugDotPrint *cudaGraphDebugDotPrint;
tcudaGraphDestroy *cudaGraphDestroy;
tcudaGraphDestroyNode *cudaGraphDestroyNode;
tcudaGraphEventRecordNodeGetEvent *cudaGraphEventRecordNodeGetEvent;
tcudaGraphEventRecordNodeSetEvent *cudaGraphEventRecordNodeSetEvent;
tcudaGraphEventWaitNodeGetEvent *cudaGraphEventWaitNodeGetEvent;
tcudaGraphEventWaitNodeSetEvent *cudaGraphEventWaitNodeSetEvent;
tcudaGraphExecChildGraphNodeSetParams *cudaGraphExecChildGraphNodeSetParams;
tcudaGraphExecDestroy *cudaGraphExecDestroy;
tcudaGraphExecEventRecordNodeSetEvent *cudaGraphExecEventRecordNodeSetEvent;
tcudaGraphExecEventWaitNodeSetEvent *cudaGraphExecEventWaitNodeSetEvent;
tcudaGraphExecExternalSemaphoresSignalNodeSetParams *cudaGraphExecExternalSemaphoresSignalNodeSetParams;
tcudaGraphExecExternalSemaphoresWaitNodeSetParams *cudaGraphExecExternalSemaphoresWaitNodeSetParams;
tcudaGraphExecGetFlags *cudaGraphExecGetFlags;
tcudaGraphExecHostNodeSetParams *cudaGraphExecHostNodeSetParams;
tcudaGraphExecKernelNodeSetParams *cudaGraphExecKernelNodeSetParams;
tcudaGraphExecMemcpyNodeSetParams *cudaGraphExecMemcpyNodeSetParams;
tcudaGraphExecMemcpyNodeSetParams1D *cudaGraphExecMemcpyNodeSetParams1D;
tcudaGraphExecMemcpyNodeSetParamsFromSymbol *cudaGraphExecMemcpyNodeSetParamsFromSymbol;
tcudaGraphExecMemcpyNodeSetParamsToSymbol *cudaGraphExecMemcpyNodeSetParamsToSymbol;
tcudaGraphExecMemsetNodeSetParams *cudaGraphExecMemsetNodeSetParams;
tcudaGraphExecNodeSetParams *cudaGraphExecNodeSetParams;
tcudaGraphExecUpdate *cudaGraphExecUpdate;
tcudaGraphExternalSemaphoresSignalNodeGetParams *cudaGraphExternalSemaphoresSignalNodeGetParams;
tcudaGraphExternalSemaphoresSignalNodeSetParams *cudaGraphExternalSemaphoresSignalNodeSetParams;
tcudaGraphExternalSemaphoresWaitNodeGetParams *cudaGraphExternalSemaphoresWaitNodeGetParams;
tcudaGraphExternalSemaphoresWaitNodeSetParams *cudaGraphExternalSemaphoresWaitNodeSetParams;
tcudaGraphGetEdges *cudaGraphGetEdges;
tcudaGraphGetNodes *cudaGraphGetNodes;
tcudaGraphGetRootNodes *cudaGraphGetRootNodes;
tcudaGraphHostNodeGetParams *cudaGraphHostNodeGetParams;
tcudaGraphHostNodeSetParams *cudaGraphHostNodeSetParams;
tcudaGraphInstantiate *cudaGraphInstantiate;
tcudaGraphInstantiateWithFlags *cudaGraphInstantiateWithFlags;
tcudaGraphInstantiateWithParams *cudaGraphInstantiateWithParams;
tcudaGraphKernelNodeCopyAttributes *cudaGraphKernelNodeCopyAttributes;
tcudaGraphKernelNodeGetAttribute *cudaGraphKernelNodeGetAttribute;
tcudaGraphKernelNodeGetParams *cudaGraphKernelNodeGetParams;
tcudaGraphKernelNodeSetAttribute *cudaGraphKernelNodeSetAttribute;
tcudaGraphKernelNodeSetParams *cudaGraphKernelNodeSetParams;
tcudaGraphLaunch *cudaGraphLaunch;
tcudaGraphMemAllocNodeGetParams *cudaGraphMemAllocNodeGetParams;
tcudaGraphMemFreeNodeGetParams *cudaGraphMemFreeNodeGetParams;
tcudaGraphMemcpyNodeGetParams *cudaGraphMemcpyNodeGetParams;
tcudaGraphMemcpyNodeSetParams *cudaGraphMemcpyNodeSetParams;
tcudaGraphMemcpyNodeSetParams1D *cudaGraphMemcpyNodeSetParams1D;
tcudaGraphMemcpyNodeSetParamsFromSymbol *cudaGraphMemcpyNodeSetParamsFromSymbol;
tcudaGraphMemcpyNodeSetParamsToSymbol *cudaGraphMemcpyNodeSetParamsToSymbol;
tcudaGraphMemsetNodeGetParams *cudaGraphMemsetNodeGetParams;
tcudaGraphMemsetNodeSetParams *cudaGraphMemsetNodeSetParams;
tcudaGraphNodeFindInClone *cudaGraphNodeFindInClone;
tcudaGraphNodeGetDependencies *cudaGraphNodeGetDependencies;
tcudaGraphNodeGetDependentNodes *cudaGraphNodeGetDependentNodes;
tcudaGraphNodeGetEnabled *cudaGraphNodeGetEnabled;
tcudaGraphNodeGetType *cudaGraphNodeGetType;
tcudaGraphNodeSetEnabled *cudaGraphNodeSetEnabled;
tcudaGraphNodeSetParams *cudaGraphNodeSetParams;
tcudaGraphReleaseUserObject *cudaGraphReleaseUserObject;
tcudaGraphRemoveDependencies *cudaGraphRemoveDependencies;
tcudaGraphRetainUserObject *cudaGraphRetainUserObject;
tcudaGraphUpload *cudaGraphUpload;
tcudaGraphicsMapResources *cudaGraphicsMapResources;
tcudaGraphicsResourceGetMappedMipmappedArray *cudaGraphicsResourceGetMappedMipmappedArray;
tcudaGraphicsResourceGetMappedPointer *cudaGraphicsResourceGetMappedPointer;
tcudaGraphicsResourceSetMapFlags *cudaGraphicsResourceSetMapFlags;
tcudaGraphicsSubResourceGetMappedArray *cudaGraphicsSubResourceGetMappedArray;
tcudaGraphicsUnmapResources *cudaGraphicsUnmapResources;
tcudaGraphicsUnregisterResource *cudaGraphicsUnregisterResource;
tcudaHostAlloc *cudaHostAlloc;
tcudaHostGetDevicePointer *cudaHostGetDevicePointer;
tcudaHostGetFlags *cudaHostGetFlags;
tcudaHostRegister *cudaHostRegister;
tcudaHostUnregister *cudaHostUnregister;
tcudaImportExternalMemory *cudaImportExternalMemory;
tcudaImportExternalSemaphore *cudaImportExternalSemaphore;
tcudaInitDevice *cudaInitDevice;
tcudaIpcCloseMemHandle *cudaIpcCloseMemHandle;
tcudaIpcGetEventHandle *cudaIpcGetEventHandle;
tcudaIpcGetMemHandle *cudaIpcGetMemHandle;
tcudaIpcOpenEventHandle *cudaIpcOpenEventHandle;
tcudaIpcOpenMemHandle *cudaIpcOpenMemHandle;
tcudaLaunchCooperativeKernel *cudaLaunchCooperativeKernel;
tcudaLaunchCooperativeKernelMultiDevice *cudaLaunchCooperativeKernelMultiDevice;
tcudaLaunchHostFunc *cudaLaunchHostFunc;
tcudaLaunchKernel *cudaLaunchKernel;
tcudaLaunchKernelExC *cudaLaunchKernelExC;
tcudaMalloc *cudaMalloc;
tcudaMalloc3D *cudaMalloc3D;
tcudaMalloc3DArray *cudaMalloc3DArray;
tcudaMallocArray *cudaMallocArray;
tcudaMallocAsync *cudaMallocAsync;
tcudaMallocFromPoolAsync *cudaMallocFromPoolAsync;
tcudaMallocHost *cudaMallocHost;
tcudaMallocManaged *cudaMallocManaged;
tcudaMallocMipmappedArray *cudaMallocMipmappedArray;
tcudaMallocPitch *cudaMallocPitch;
tcudaMemAdvise *cudaMemAdvise;
tcudaMemAdvise_v2 *cudaMemAdvise_v2;
tcudaMemGetInfo *cudaMemGetInfo;
tcudaMemPoolCreate *cudaMemPoolCreate;
tcudaMemPoolDestroy *cudaMemPoolDestroy;
tcudaMemPoolExportPointer *cudaMemPoolExportPointer;
tcudaMemPoolExportToShareableHandle *cudaMemPoolExportToShareableHandle;
tcudaMemPoolGetAccess *cudaMemPoolGetAccess;
tcudaMemPoolGetAttribute *cudaMemPoolGetAttribute;
tcudaMemPoolImportFromShareableHandle *cudaMemPoolImportFromShareableHandle;
tcudaMemPoolImportPointer *cudaMemPoolImportPointer;
tcudaMemPoolSetAccess *cudaMemPoolSetAccess;
tcudaMemPoolSetAttribute *cudaMemPoolSetAttribute;
tcudaMemPoolTrimTo *cudaMemPoolTrimTo;
tcudaMemPrefetchAsync *cudaMemPrefetchAsync;
tcudaMemPrefetchAsync_v2 *cudaMemPrefetchAsync_v2;
tcudaMemRangeGetAttribute *cudaMemRangeGetAttribute;
tcudaMemRangeGetAttributes *cudaMemRangeGetAttributes;
tcudaMemcpy *cudaMemcpy;
tcudaMemcpy2D *cudaMemcpy2D;
tcudaMemcpy2DArrayToArray *cudaMemcpy2DArrayToArray;
tcudaMemcpy2DAsync *cudaMemcpy2DAsync;
tcudaMemcpy2DFromArray *cudaMemcpy2DFromArray;
tcudaMemcpy2DFromArrayAsync *cudaMemcpy2DFromArrayAsync;
tcudaMemcpy2DToArray *cudaMemcpy2DToArray;
tcudaMemcpy2DToArrayAsync *cudaMemcpy2DToArrayAsync;
tcudaMemcpy3D *cudaMemcpy3D;
tcudaMemcpy3DAsync *cudaMemcpy3DAsync;
tcudaMemcpy3DPeer *cudaMemcpy3DPeer;
tcudaMemcpy3DPeerAsync *cudaMemcpy3DPeerAsync;
tcudaMemcpyArrayToArray *cudaMemcpyArrayToArray;
tcudaMemcpyAsync *cudaMemcpyAsync;
tcudaMemcpyFromArray *cudaMemcpyFromArray;
tcudaMemcpyFromArrayAsync *cudaMemcpyFromArrayAsync;
tcudaMemcpyFromSymbol *cudaMemcpyFromSymbol;
tcudaMemcpyFromSymbolAsync *cudaMemcpyFromSymbolAsync;
tcudaMemcpyPeer *cudaMemcpyPeer;
tcudaMemcpyPeerAsync *cudaMemcpyPeerAsync;
tcudaMemcpyToArray *cudaMemcpyToArray;
tcudaMemcpyToArrayAsync *cudaMemcpyToArrayAsync;
tcudaMemcpyToSymbol *cudaMemcpyToSymbol;
tcudaMemcpyToSymbolAsync *cudaMemcpyToSymbolAsync;
tcudaMemset *cudaMemset;
tcudaMemset2D *cudaMemset2D;
tcudaMemset2DAsync *cudaMemset2DAsync;
tcudaMemset3D *cudaMemset3D;
tcudaMemset3DAsync *cudaMemset3DAsync;
tcudaMemsetAsync *cudaMemsetAsync;
tcudaMipmappedArrayGetMemoryRequirements *cudaMipmappedArrayGetMemoryRequirements;
tcudaMipmappedArrayGetSparseProperties *cudaMipmappedArrayGetSparseProperties;
tcudaOccupancyAvailableDynamicSMemPerBlock *cudaOccupancyAvailableDynamicSMemPerBlock;
tcudaOccupancyMaxActiveBlocksPerMultiprocessor *cudaOccupancyMaxActiveBlocksPerMultiprocessor;
tcudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags *cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags;
tcudaOccupancyMaxActiveClusters *cudaOccupancyMaxActiveClusters;
tcudaOccupancyMaxPotentialClusterSize *cudaOccupancyMaxPotentialClusterSize;
tcudaPeekAtLastError *cudaPeekAtLastError;
tcudaPointerGetAttributes *cudaPointerGetAttributes;
tcudaProfilerStart *cudaProfilerStart;
tcudaProfilerStop *cudaProfilerStop;
tcudaRuntimeGetVersion *cudaRuntimeGetVersion;
tcudaSetDevice *cudaSetDevice;
tcudaSetDeviceFlags *cudaSetDeviceFlags;
tcudaSetDoubleForDevice *cudaSetDoubleForDevice;
tcudaSetDoubleForHost *cudaSetDoubleForHost;
tcudaSetValidDevices *cudaSetValidDevices;
tcudaSignalExternalSemaphoresAsync_v2 *cudaSignalExternalSemaphoresAsync_v2;
tcudaStreamAddCallback *cudaStreamAddCallback;
tcudaStreamAttachMemAsync *cudaStreamAttachMemAsync;
tcudaStreamBeginCapture *cudaStreamBeginCapture;
tcudaStreamCopyAttributes *cudaStreamCopyAttributes;
tcudaStreamCreate *cudaStreamCreate;
tcudaStreamCreateWithFlags *cudaStreamCreateWithFlags;
tcudaStreamCreateWithPriority *cudaStreamCreateWithPriority;
tcudaStreamDestroy *cudaStreamDestroy;
tcudaStreamEndCapture *cudaStreamEndCapture;
tcudaStreamGetAttribute *cudaStreamGetAttribute;
tcudaStreamGetCaptureInfo_v2 *cudaStreamGetCaptureInfo_v2;
tcudaStreamGetFlags *cudaStreamGetFlags;
tcudaStreamGetId *cudaStreamGetId;
tcudaStreamGetPriority *cudaStreamGetPriority;
tcudaStreamIsCapturing *cudaStreamIsCapturing;
tcudaStreamQuery *cudaStreamQuery;
tcudaStreamSetAttribute *cudaStreamSetAttribute;
tcudaStreamSynchronize *cudaStreamSynchronize;
tcudaStreamUpdateCaptureDependencies *cudaStreamUpdateCaptureDependencies;
tcudaStreamWaitEvent *cudaStreamWaitEvent;
tcudaThreadExchangeStreamCaptureMode *cudaThreadExchangeStreamCaptureMode;
tcudaThreadExit *cudaThreadExit;
tcudaThreadGetCacheConfig *cudaThreadGetCacheConfig;
tcudaThreadGetLimit *cudaThreadGetLimit;
tcudaThreadSetCacheConfig *cudaThreadSetCacheConfig;
tcudaThreadSetLimit *cudaThreadSetLimit;
tcudaThreadSynchronize *cudaThreadSynchronize;
tcudaUserObjectCreate *cudaUserObjectCreate;
tcudaUserObjectRelease *cudaUserObjectRelease;
tcudaUserObjectRetain *cudaUserObjectRetain;
tcudaWaitExternalSemaphoresAsync_v2 *cudaWaitExternalSemaphoresAsync_v2;
tnvrtcAddNameExpression *nvrtcAddNameExpression;
tnvrtcCompileProgram *nvrtcCompileProgram;
tnvrtcCreateProgram *nvrtcCreateProgram;
tnvrtcDestroyProgram *nvrtcDestroyProgram;
tnvrtcGetCUBIN *nvrtcGetCUBIN;
tnvrtcGetCUBINSize *nvrtcGetCUBINSize;
tnvrtcGetErrorString *nvrtcGetErrorString;
tnvrtcGetLTOIR *nvrtcGetLTOIR;
tnvrtcGetLTOIRSize *nvrtcGetLTOIRSize;
tnvrtcGetLoweredName *nvrtcGetLoweredName;
tnvrtcGetNVVM *nvrtcGetNVVM;
tnvrtcGetNVVMSize *nvrtcGetNVVMSize;
tnvrtcGetNumSupportedArchs *nvrtcGetNumSupportedArchs;
tnvrtcGetOptiXIR *nvrtcGetOptiXIR;
tnvrtcGetOptiXIRSize *nvrtcGetOptiXIRSize;
tnvrtcGetPTX *nvrtcGetPTX;
tnvrtcGetPTXSize *nvrtcGetPTXSize;
tnvrtcGetProgramLog *nvrtcGetProgramLog;
tnvrtcGetProgramLogSize *nvrtcGetProgramLogSize;
tnvrtcGetSupportedArchs *nvrtcGetSupportedArchs;
tnvrtcVersion *nvrtcVersion;



///// END REGION: OROCHI_SUMMONER_REGION_cuew_cpp_1
///// (region automatically generated by Orochi Summoner)
#pragma endregion










static DynamicLibrary dynamic_library_open_find(const char **paths)
{
  int i = 0;
  while (paths[i] != NULL) {
    DynamicLibrary lib = dynamic_library_open(paths[i]);
    if (lib != NULL) {
      return lib;
    }
    ++i;
  }
  return NULL;
}

// Implementation function.
static void cuewCudaExit(void)
{

  if (cudart_lib != NULL) {
    dynamic_library_close(cudart_lib);
    cudart_lib = NULL;
  }

  if (cuda_lib != NULL) {
    dynamic_library_close(cuda_lib);
    cuda_lib = NULL;
  }
}

static int cuewCudaInit(void)
{
  // Library paths.
#ifdef _WIN32
  // Expected in c:/windows/system or similar, no path needed.
  const char *cuda_paths[] = {"nvcuda.dll", NULL};
  const char *cudart_paths[] = {"cudart64_12.dll", NULL};
#elif defined(__APPLE__)
  // Default installation path.
  const char *cuda_paths[] = {"/usr/local/cuda/lib/libcuda.dylib", NULL};
  const char *cudart_paths[] = { NULL}; // TODO
#else
  const char *cuda_paths[] = {"libcuda.so", "libcuda.so.1", NULL};
  const char *cudart_paths[] = { NULL}; // TODO
#endif
  static int initialized = 0;
  static int result = 0;
  int error, driver_version;

  if (initialized) {
    return result;
  }

  initialized = 1;

  error = atexit(cuewCudaExit);
  if (error) {
    result = CUEW_ERROR_ATEXIT_FAILED;
    return result;
  }

  // Load library.
  cuda_lib = dynamic_library_open_find(cuda_paths);

  if (cuda_lib == NULL) {
    result = CUEW_ERROR_OPEN_FAILED;
    return result;
  }



  // Load library.
  cudart_lib = dynamic_library_open_find(cudart_paths);

  if (cudart_lib == NULL) {
      // maybe better to not fail for this DLL, which is not included in driver ? 
  }


  /* Detect driver version. */
  driver_version = 1000;

  _LIBRARY_FIND(cuda_lib, cuDriverGetVersion)
  if (cuDriverGetVersion) {
    cuDriverGetVersion(&driver_version);
  }

  /* We require version 4.0. */
  if (driver_version < 4000) {
    result = CUEW_ERROR_OPEN_FAILED;
    return result;
  }
  

#pragma region OROCHI_SUMMONER_REGION_cuew_cpp_2

/////
///// THIS REGION HAS BEEN AUTOMATICALLY GENERATED BY OROCHI SUMMONER.
///// Manual modification of this region is not recommended.
/////

_LIBRARY_FIND( cuda_lib, cuArray3DCreate_v2 );
_LIBRARY_FIND( cuda_lib, cuArray3DGetDescriptor_v2 );
_LIBRARY_FIND( cuda_lib, cuArrayCreate_v2 );
_LIBRARY_FIND( cuda_lib, cuArrayDestroy );
_LIBRARY_FIND( cuda_lib, cuArrayGetDescriptor_v2 );
_LIBRARY_FIND( cuda_lib, cuArrayGetMemoryRequirements );
_LIBRARY_FIND( cuda_lib, cuArrayGetPlane );
_LIBRARY_FIND( cuda_lib, cuArrayGetSparseProperties );
// DLL not found for: cuCoredumpGetAttribute
// DLL not found for: cuCoredumpGetAttributeGlobal
// DLL not found for: cuCoredumpSetAttribute
// DLL not found for: cuCoredumpSetAttributeGlobal
_LIBRARY_FIND( cuda_lib, cuCtxAttach );
_LIBRARY_FIND( cuda_lib, cuCtxCreate_v2 );
_LIBRARY_FIND( cuda_lib, cuCtxCreate_v3 );
_LIBRARY_FIND( cuda_lib, cuCtxDestroy_v2 );
_LIBRARY_FIND( cuda_lib, cuCtxDetach );
_LIBRARY_FIND( cuda_lib, cuCtxDisablePeerAccess );
_LIBRARY_FIND( cuda_lib, cuCtxEnablePeerAccess );
_LIBRARY_FIND( cuda_lib, cuCtxGetApiVersion );
_LIBRARY_FIND( cuda_lib, cuCtxGetCacheConfig );
_LIBRARY_FIND( cuda_lib, cuCtxGetCurrent );
_LIBRARY_FIND( cuda_lib, cuCtxGetDevice );
_LIBRARY_FIND( cuda_lib, cuCtxGetExecAffinity );
_LIBRARY_FIND( cuda_lib, cuCtxGetFlags );
_LIBRARY_FIND( cuda_lib, cuCtxGetId );
_LIBRARY_FIND( cuda_lib, cuCtxGetLimit );
_LIBRARY_FIND( cuda_lib, cuCtxGetSharedMemConfig );
_LIBRARY_FIND( cuda_lib, cuCtxGetStreamPriorityRange );
_LIBRARY_FIND( cuda_lib, cuCtxPopCurrent_v2 );
_LIBRARY_FIND( cuda_lib, cuCtxPushCurrent_v2 );
_LIBRARY_FIND( cuda_lib, cuCtxResetPersistingL2Cache );
_LIBRARY_FIND( cuda_lib, cuCtxSetCacheConfig );
_LIBRARY_FIND( cuda_lib, cuCtxSetCurrent );
// DLL not found for: cuCtxSetFlags
_LIBRARY_FIND( cuda_lib, cuCtxSetLimit );
_LIBRARY_FIND( cuda_lib, cuCtxSetSharedMemConfig );
_LIBRARY_FIND( cuda_lib, cuCtxSynchronize );
_LIBRARY_FIND( cuda_lib, cuDestroyExternalMemory );
_LIBRARY_FIND( cuda_lib, cuDestroyExternalSemaphore );
_LIBRARY_FIND( cuda_lib, cuDeviceCanAccessPeer );
_LIBRARY_FIND( cuda_lib, cuDeviceComputeCapability );
_LIBRARY_FIND( cuda_lib, cuDeviceGet );
_LIBRARY_FIND( cuda_lib, cuDeviceGetAttribute );
_LIBRARY_FIND( cuda_lib, cuDeviceGetByPCIBusId );
_LIBRARY_FIND( cuda_lib, cuDeviceGetCount );
_LIBRARY_FIND( cuda_lib, cuDeviceGetDefaultMemPool );
_LIBRARY_FIND( cuda_lib, cuDeviceGetExecAffinitySupport );
_LIBRARY_FIND( cuda_lib, cuDeviceGetGraphMemAttribute );
_LIBRARY_FIND( cuda_lib, cuDeviceGetLuid );
_LIBRARY_FIND( cuda_lib, cuDeviceGetMemPool );
_LIBRARY_FIND( cuda_lib, cuDeviceGetName );
// DLL not found for: cuDeviceGetNvSciSyncAttributes
_LIBRARY_FIND( cuda_lib, cuDeviceGetP2PAttribute );
_LIBRARY_FIND( cuda_lib, cuDeviceGetPCIBusId );
_LIBRARY_FIND( cuda_lib, cuDeviceGetProperties );
_LIBRARY_FIND( cuda_lib, cuDeviceGetTexture1DLinearMaxWidth );
_LIBRARY_FIND( cuda_lib, cuDeviceGetUuid );
_LIBRARY_FIND( cuda_lib, cuDeviceGetUuid_v2 );
_LIBRARY_FIND( cuda_lib, cuDeviceGraphMemTrim );
_LIBRARY_FIND( cuda_lib, cuDevicePrimaryCtxGetState );
_LIBRARY_FIND( cuda_lib, cuDevicePrimaryCtxRelease_v2 );
_LIBRARY_FIND( cuda_lib, cuDevicePrimaryCtxReset_v2 );
_LIBRARY_FIND( cuda_lib, cuDevicePrimaryCtxRetain );
_LIBRARY_FIND( cuda_lib, cuDevicePrimaryCtxSetFlags_v2 );
_LIBRARY_FIND( cuda_lib, cuDeviceSetGraphMemAttribute );
_LIBRARY_FIND( cuda_lib, cuDeviceSetMemPool );
_LIBRARY_FIND( cuda_lib, cuDeviceTotalMem_v2 );
_LIBRARY_FIND( cuda_lib, cuDriverGetVersion );
_LIBRARY_FIND( cuda_lib, cuEventCreate );
_LIBRARY_FIND( cuda_lib, cuEventDestroy_v2 );
_LIBRARY_FIND( cuda_lib, cuEventElapsedTime );
_LIBRARY_FIND( cuda_lib, cuEventQuery );
_LIBRARY_FIND( cuda_lib, cuEventRecord );
_LIBRARY_FIND( cuda_lib, cuEventRecordWithFlags );
_LIBRARY_FIND( cuda_lib, cuEventSynchronize );
_LIBRARY_FIND( cuda_lib, cuExternalMemoryGetMappedBuffer );
_LIBRARY_FIND( cuda_lib, cuExternalMemoryGetMappedMipmappedArray );
_LIBRARY_FIND( cuda_lib, cuFlushGPUDirectRDMAWrites );
_LIBRARY_FIND( cuda_lib, cuFuncGetAttribute );
_LIBRARY_FIND( cuda_lib, cuFuncGetModule );
_LIBRARY_FIND( cuda_lib, cuFuncSetAttribute );
_LIBRARY_FIND( cuda_lib, cuFuncSetBlockShape );
_LIBRARY_FIND( cuda_lib, cuFuncSetCacheConfig );
_LIBRARY_FIND( cuda_lib, cuFuncSetSharedMemConfig );
_LIBRARY_FIND( cuda_lib, cuFuncSetSharedSize );
_LIBRARY_FIND( cuda_lib, cuGetErrorName );
_LIBRARY_FIND( cuda_lib, cuGetErrorString );
_LIBRARY_FIND( cuda_lib, cuGetExportTable );
_LIBRARY_FIND( cuda_lib, cuGetProcAddress_v2 );
_LIBRARY_FIND( cuda_lib, cuGraphAddBatchMemOpNode );
_LIBRARY_FIND( cuda_lib, cuGraphAddChildGraphNode );
_LIBRARY_FIND( cuda_lib, cuGraphAddDependencies );
_LIBRARY_FIND( cuda_lib, cuGraphAddEmptyNode );
_LIBRARY_FIND( cuda_lib, cuGraphAddEventRecordNode );
_LIBRARY_FIND( cuda_lib, cuGraphAddEventWaitNode );
_LIBRARY_FIND( cuda_lib, cuGraphAddExternalSemaphoresSignalNode );
_LIBRARY_FIND( cuda_lib, cuGraphAddExternalSemaphoresWaitNode );
_LIBRARY_FIND( cuda_lib, cuGraphAddHostNode );
_LIBRARY_FIND( cuda_lib, cuGraphAddKernelNode_v2 );
_LIBRARY_FIND( cuda_lib, cuGraphAddMemAllocNode );
_LIBRARY_FIND( cuda_lib, cuGraphAddMemFreeNode );
_LIBRARY_FIND( cuda_lib, cuGraphAddMemcpyNode );
_LIBRARY_FIND( cuda_lib, cuGraphAddMemsetNode );
// DLL not found for: cuGraphAddNode
_LIBRARY_FIND( cuda_lib, cuGraphBatchMemOpNodeGetParams );
_LIBRARY_FIND( cuda_lib, cuGraphBatchMemOpNodeSetParams );
_LIBRARY_FIND( cuda_lib, cuGraphChildGraphNodeGetGraph );
_LIBRARY_FIND( cuda_lib, cuGraphClone );
_LIBRARY_FIND( cuda_lib, cuGraphCreate );
_LIBRARY_FIND( cuda_lib, cuGraphDebugDotPrint );
_LIBRARY_FIND( cuda_lib, cuGraphDestroy );
_LIBRARY_FIND( cuda_lib, cuGraphDestroyNode );
_LIBRARY_FIND( cuda_lib, cuGraphEventRecordNodeGetEvent );
_LIBRARY_FIND( cuda_lib, cuGraphEventRecordNodeSetEvent );
_LIBRARY_FIND( cuda_lib, cuGraphEventWaitNodeGetEvent );
_LIBRARY_FIND( cuda_lib, cuGraphEventWaitNodeSetEvent );
_LIBRARY_FIND( cuda_lib, cuGraphExecBatchMemOpNodeSetParams );
_LIBRARY_FIND( cuda_lib, cuGraphExecChildGraphNodeSetParams );
_LIBRARY_FIND( cuda_lib, cuGraphExecDestroy );
_LIBRARY_FIND( cuda_lib, cuGraphExecEventRecordNodeSetEvent );
_LIBRARY_FIND( cuda_lib, cuGraphExecEventWaitNodeSetEvent );
_LIBRARY_FIND( cuda_lib, cuGraphExecExternalSemaphoresSignalNodeSetParams );
_LIBRARY_FIND( cuda_lib, cuGraphExecExternalSemaphoresWaitNodeSetParams );
_LIBRARY_FIND( cuda_lib, cuGraphExecGetFlags );
_LIBRARY_FIND( cuda_lib, cuGraphExecHostNodeSetParams );
_LIBRARY_FIND( cuda_lib, cuGraphExecKernelNodeSetParams_v2 );
_LIBRARY_FIND( cuda_lib, cuGraphExecMemcpyNodeSetParams );
_LIBRARY_FIND( cuda_lib, cuGraphExecMemsetNodeSetParams );
// DLL not found for: cuGraphExecNodeSetParams
_LIBRARY_FIND( cuda_lib, cuGraphExecUpdate_v2 );
_LIBRARY_FIND( cuda_lib, cuGraphExternalSemaphoresSignalNodeGetParams );
_LIBRARY_FIND( cuda_lib, cuGraphExternalSemaphoresSignalNodeSetParams );
_LIBRARY_FIND( cuda_lib, cuGraphExternalSemaphoresWaitNodeGetParams );
_LIBRARY_FIND( cuda_lib, cuGraphExternalSemaphoresWaitNodeSetParams );
_LIBRARY_FIND( cuda_lib, cuGraphGetEdges );
_LIBRARY_FIND( cuda_lib, cuGraphGetNodes );
_LIBRARY_FIND( cuda_lib, cuGraphGetRootNodes );
_LIBRARY_FIND( cuda_lib, cuGraphHostNodeGetParams );
_LIBRARY_FIND( cuda_lib, cuGraphHostNodeSetParams );
_LIBRARY_FIND( cuda_lib, cuGraphInstantiateWithFlags );
_LIBRARY_FIND( cuda_lib, cuGraphInstantiateWithParams );
_LIBRARY_FIND( cuda_lib, cuGraphKernelNodeCopyAttributes );
_LIBRARY_FIND( cuda_lib, cuGraphKernelNodeGetAttribute );
_LIBRARY_FIND( cuda_lib, cuGraphKernelNodeGetParams_v2 );
_LIBRARY_FIND( cuda_lib, cuGraphKernelNodeSetAttribute );
_LIBRARY_FIND( cuda_lib, cuGraphKernelNodeSetParams_v2 );
_LIBRARY_FIND( cuda_lib, cuGraphLaunch );
_LIBRARY_FIND( cuda_lib, cuGraphMemAllocNodeGetParams );
_LIBRARY_FIND( cuda_lib, cuGraphMemFreeNodeGetParams );
_LIBRARY_FIND( cuda_lib, cuGraphMemcpyNodeGetParams );
_LIBRARY_FIND( cuda_lib, cuGraphMemcpyNodeSetParams );
_LIBRARY_FIND( cuda_lib, cuGraphMemsetNodeGetParams );
_LIBRARY_FIND( cuda_lib, cuGraphMemsetNodeSetParams );
_LIBRARY_FIND( cuda_lib, cuGraphNodeFindInClone );
_LIBRARY_FIND( cuda_lib, cuGraphNodeGetDependencies );
_LIBRARY_FIND( cuda_lib, cuGraphNodeGetDependentNodes );
_LIBRARY_FIND( cuda_lib, cuGraphNodeGetEnabled );
_LIBRARY_FIND( cuda_lib, cuGraphNodeGetType );
_LIBRARY_FIND( cuda_lib, cuGraphNodeSetEnabled );
// DLL not found for: cuGraphNodeSetParams
_LIBRARY_FIND( cuda_lib, cuGraphReleaseUserObject );
_LIBRARY_FIND( cuda_lib, cuGraphRemoveDependencies );
_LIBRARY_FIND( cuda_lib, cuGraphRetainUserObject );
_LIBRARY_FIND( cuda_lib, cuGraphUpload );
_LIBRARY_FIND( cuda_lib, cuGraphicsMapResources );
_LIBRARY_FIND( cuda_lib, cuGraphicsResourceGetMappedMipmappedArray );
_LIBRARY_FIND( cuda_lib, cuGraphicsResourceGetMappedPointer_v2 );
_LIBRARY_FIND( cuda_lib, cuGraphicsResourceSetMapFlags_v2 );
_LIBRARY_FIND( cuda_lib, cuGraphicsSubResourceGetMappedArray );
_LIBRARY_FIND( cuda_lib, cuGraphicsUnmapResources );
_LIBRARY_FIND( cuda_lib, cuGraphicsUnregisterResource );
_LIBRARY_FIND( cuda_lib, cuImportExternalMemory );
_LIBRARY_FIND( cuda_lib, cuImportExternalSemaphore );
_LIBRARY_FIND( cuda_lib, cuInit );
_LIBRARY_FIND( cuda_lib, cuIpcCloseMemHandle );
_LIBRARY_FIND( cuda_lib, cuIpcGetEventHandle );
_LIBRARY_FIND( cuda_lib, cuIpcGetMemHandle );
_LIBRARY_FIND( cuda_lib, cuIpcOpenEventHandle );
_LIBRARY_FIND( cuda_lib, cuIpcOpenMemHandle_v2 );
_LIBRARY_FIND( cuda_lib, cuKernelGetAttribute );
_LIBRARY_FIND( cuda_lib, cuKernelGetFunction );
_LIBRARY_FIND( cuda_lib, cuKernelSetAttribute );
_LIBRARY_FIND( cuda_lib, cuKernelSetCacheConfig );
_LIBRARY_FIND( cuda_lib, cuLaunch );
_LIBRARY_FIND( cuda_lib, cuLaunchCooperativeKernel );
_LIBRARY_FIND( cuda_lib, cuLaunchCooperativeKernelMultiDevice );
_LIBRARY_FIND( cuda_lib, cuLaunchGrid );
_LIBRARY_FIND( cuda_lib, cuLaunchGridAsync );
_LIBRARY_FIND( cuda_lib, cuLaunchHostFunc );
_LIBRARY_FIND( cuda_lib, cuLaunchKernel );
_LIBRARY_FIND( cuda_lib, cuLaunchKernelEx );
_LIBRARY_FIND( cuda_lib, cuLibraryGetGlobal );
_LIBRARY_FIND( cuda_lib, cuLibraryGetKernel );
_LIBRARY_FIND( cuda_lib, cuLibraryGetManaged );
_LIBRARY_FIND( cuda_lib, cuLibraryGetModule );
_LIBRARY_FIND( cuda_lib, cuLibraryGetUnifiedFunction );
_LIBRARY_FIND( cuda_lib, cuLibraryLoadData );
_LIBRARY_FIND( cuda_lib, cuLibraryLoadFromFile );
_LIBRARY_FIND( cuda_lib, cuLibraryUnload );
_LIBRARY_FIND( cuda_lib, cuLinkAddData_v2 );
_LIBRARY_FIND( cuda_lib, cuLinkAddFile_v2 );
_LIBRARY_FIND( cuda_lib, cuLinkComplete );
_LIBRARY_FIND( cuda_lib, cuLinkCreate_v2 );
_LIBRARY_FIND( cuda_lib, cuLinkDestroy );
_LIBRARY_FIND( cuda_lib, cuMemAddressFree );
_LIBRARY_FIND( cuda_lib, cuMemAddressReserve );
_LIBRARY_FIND( cuda_lib, cuMemAdvise );
// DLL not found for: cuMemAdvise_v2
_LIBRARY_FIND( cuda_lib, cuMemAllocAsync );
_LIBRARY_FIND( cuda_lib, cuMemAllocFromPoolAsync );
_LIBRARY_FIND( cuda_lib, cuMemAllocHost_v2 );
_LIBRARY_FIND( cuda_lib, cuMemAllocManaged );
_LIBRARY_FIND( cuda_lib, cuMemAllocPitch_v2 );
_LIBRARY_FIND( cuda_lib, cuMemAlloc_v2 );
_LIBRARY_FIND( cuda_lib, cuMemCreate );
_LIBRARY_FIND( cuda_lib, cuMemExportToShareableHandle );
_LIBRARY_FIND( cuda_lib, cuMemFreeAsync );
_LIBRARY_FIND( cuda_lib, cuMemFreeHost );
_LIBRARY_FIND( cuda_lib, cuMemFree_v2 );
_LIBRARY_FIND( cuda_lib, cuMemGetAccess );
_LIBRARY_FIND( cuda_lib, cuMemGetAddressRange_v2 );
_LIBRARY_FIND( cuda_lib, cuMemGetAllocationGranularity );
_LIBRARY_FIND( cuda_lib, cuMemGetAllocationPropertiesFromHandle );
_LIBRARY_FIND( cuda_lib, cuMemGetHandleForAddressRange );
_LIBRARY_FIND( cuda_lib, cuMemGetInfo_v2 );
_LIBRARY_FIND( cuda_lib, cuMemHostAlloc );
_LIBRARY_FIND( cuda_lib, cuMemHostGetDevicePointer_v2 );
_LIBRARY_FIND( cuda_lib, cuMemHostGetFlags );
_LIBRARY_FIND( cuda_lib, cuMemHostRegister_v2 );
_LIBRARY_FIND( cuda_lib, cuMemHostUnregister );
_LIBRARY_FIND( cuda_lib, cuMemImportFromShareableHandle );
_LIBRARY_FIND( cuda_lib, cuMemMap );
_LIBRARY_FIND( cuda_lib, cuMemMapArrayAsync );
_LIBRARY_FIND( cuda_lib, cuMemPoolCreate );
_LIBRARY_FIND( cuda_lib, cuMemPoolDestroy );
_LIBRARY_FIND( cuda_lib, cuMemPoolExportPointer );
_LIBRARY_FIND( cuda_lib, cuMemPoolExportToShareableHandle );
_LIBRARY_FIND( cuda_lib, cuMemPoolGetAccess );
_LIBRARY_FIND( cuda_lib, cuMemPoolGetAttribute );
_LIBRARY_FIND( cuda_lib, cuMemPoolImportFromShareableHandle );
_LIBRARY_FIND( cuda_lib, cuMemPoolImportPointer );
_LIBRARY_FIND( cuda_lib, cuMemPoolSetAccess );
_LIBRARY_FIND( cuda_lib, cuMemPoolSetAttribute );
_LIBRARY_FIND( cuda_lib, cuMemPoolTrimTo );
_LIBRARY_FIND( cuda_lib, cuMemPrefetchAsync );
// DLL not found for: cuMemPrefetchAsync_v2
_LIBRARY_FIND( cuda_lib, cuMemRangeGetAttribute );
_LIBRARY_FIND( cuda_lib, cuMemRangeGetAttributes );
_LIBRARY_FIND( cuda_lib, cuMemRelease );
_LIBRARY_FIND( cuda_lib, cuMemRetainAllocationHandle );
_LIBRARY_FIND( cuda_lib, cuMemSetAccess );
_LIBRARY_FIND( cuda_lib, cuMemUnmap );
_LIBRARY_FIND( cuda_lib, cuMemcpy );
_LIBRARY_FIND( cuda_lib, cuMemcpy2DAsync_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpy2DUnaligned_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpy2D_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpy3DAsync_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpy3DPeer );
_LIBRARY_FIND( cuda_lib, cuMemcpy3DPeerAsync );
_LIBRARY_FIND( cuda_lib, cuMemcpy3D_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpyAsync );
_LIBRARY_FIND( cuda_lib, cuMemcpyAtoA_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpyAtoD_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpyAtoHAsync_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpyAtoH_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpyDtoA_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpyDtoDAsync_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpyDtoD_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpyDtoHAsync_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpyDtoH_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpyHtoAAsync_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpyHtoA_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpyHtoDAsync_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpyHtoD_v2 );
_LIBRARY_FIND( cuda_lib, cuMemcpyPeer );
_LIBRARY_FIND( cuda_lib, cuMemcpyPeerAsync );
_LIBRARY_FIND( cuda_lib, cuMemsetD16Async );
_LIBRARY_FIND( cuda_lib, cuMemsetD16_v2 );
_LIBRARY_FIND( cuda_lib, cuMemsetD2D16Async );
_LIBRARY_FIND( cuda_lib, cuMemsetD2D16_v2 );
_LIBRARY_FIND( cuda_lib, cuMemsetD2D32Async );
_LIBRARY_FIND( cuda_lib, cuMemsetD2D32_v2 );
_LIBRARY_FIND( cuda_lib, cuMemsetD2D8Async );
_LIBRARY_FIND( cuda_lib, cuMemsetD2D8_v2 );
_LIBRARY_FIND( cuda_lib, cuMemsetD32Async );
_LIBRARY_FIND( cuda_lib, cuMemsetD32_v2 );
_LIBRARY_FIND( cuda_lib, cuMemsetD8Async );
_LIBRARY_FIND( cuda_lib, cuMemsetD8_v2 );
_LIBRARY_FIND( cuda_lib, cuMipmappedArrayCreate );
_LIBRARY_FIND( cuda_lib, cuMipmappedArrayDestroy );
_LIBRARY_FIND( cuda_lib, cuMipmappedArrayGetLevel );
_LIBRARY_FIND( cuda_lib, cuMipmappedArrayGetMemoryRequirements );
_LIBRARY_FIND( cuda_lib, cuMipmappedArrayGetSparseProperties );
_LIBRARY_FIND( cuda_lib, cuModuleGetFunction );
_LIBRARY_FIND( cuda_lib, cuModuleGetGlobal_v2 );
_LIBRARY_FIND( cuda_lib, cuModuleGetLoadingMode );
_LIBRARY_FIND( cuda_lib, cuModuleGetSurfRef );
_LIBRARY_FIND( cuda_lib, cuModuleGetTexRef );
_LIBRARY_FIND( cuda_lib, cuModuleLoad );
_LIBRARY_FIND( cuda_lib, cuModuleLoadData );
_LIBRARY_FIND( cuda_lib, cuModuleLoadDataEx );
_LIBRARY_FIND( cuda_lib, cuModuleLoadFatBinary );
_LIBRARY_FIND( cuda_lib, cuModuleUnload );
// DLL not found for: cuMulticastAddDevice
// DLL not found for: cuMulticastBindAddr
// DLL not found for: cuMulticastBindMem
// DLL not found for: cuMulticastCreate
// DLL not found for: cuMulticastGetGranularity
// DLL not found for: cuMulticastUnbind
_LIBRARY_FIND( cuda_lib, cuOccupancyAvailableDynamicSMemPerBlock );
_LIBRARY_FIND( cuda_lib, cuOccupancyMaxActiveBlocksPerMultiprocessor );
_LIBRARY_FIND( cuda_lib, cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags );
_LIBRARY_FIND( cuda_lib, cuOccupancyMaxActiveClusters );
_LIBRARY_FIND( cuda_lib, cuOccupancyMaxPotentialBlockSize );
_LIBRARY_FIND( cuda_lib, cuOccupancyMaxPotentialBlockSizeWithFlags );
_LIBRARY_FIND( cuda_lib, cuOccupancyMaxPotentialClusterSize );
_LIBRARY_FIND( cuda_lib, cuParamSetSize );
_LIBRARY_FIND( cuda_lib, cuParamSetTexRef );
_LIBRARY_FIND( cuda_lib, cuParamSetf );
_LIBRARY_FIND( cuda_lib, cuParamSeti );
_LIBRARY_FIND( cuda_lib, cuParamSetv );
_LIBRARY_FIND( cuda_lib, cuPointerGetAttribute );
_LIBRARY_FIND( cuda_lib, cuPointerGetAttributes );
_LIBRARY_FIND( cuda_lib, cuPointerSetAttribute );
_LIBRARY_FIND( cuda_lib, cuSignalExternalSemaphoresAsync );
_LIBRARY_FIND( cuda_lib, cuStreamAddCallback );
_LIBRARY_FIND( cuda_lib, cuStreamAttachMemAsync );
_LIBRARY_FIND( cuda_lib, cuStreamBatchMemOp_v2 );
_LIBRARY_FIND( cuda_lib, cuStreamBeginCapture_v2 );
_LIBRARY_FIND( cuda_lib, cuStreamCopyAttributes );
_LIBRARY_FIND( cuda_lib, cuStreamCreate );
_LIBRARY_FIND( cuda_lib, cuStreamCreateWithPriority );
_LIBRARY_FIND( cuda_lib, cuStreamDestroy_v2 );
_LIBRARY_FIND( cuda_lib, cuStreamEndCapture );
_LIBRARY_FIND( cuda_lib, cuStreamGetAttribute );
_LIBRARY_FIND( cuda_lib, cuStreamGetCaptureInfo_v2 );
_LIBRARY_FIND( cuda_lib, cuStreamGetCtx );
_LIBRARY_FIND( cuda_lib, cuStreamGetFlags );
_LIBRARY_FIND( cuda_lib, cuStreamGetId );
_LIBRARY_FIND( cuda_lib, cuStreamGetPriority );
_LIBRARY_FIND( cuda_lib, cuStreamIsCapturing );
_LIBRARY_FIND( cuda_lib, cuStreamQuery );
_LIBRARY_FIND( cuda_lib, cuStreamSetAttribute );
_LIBRARY_FIND( cuda_lib, cuStreamSynchronize );
_LIBRARY_FIND( cuda_lib, cuStreamUpdateCaptureDependencies );
_LIBRARY_FIND( cuda_lib, cuStreamWaitEvent );
_LIBRARY_FIND( cuda_lib, cuStreamWaitValue32_v2 );
_LIBRARY_FIND( cuda_lib, cuStreamWaitValue64_v2 );
_LIBRARY_FIND( cuda_lib, cuStreamWriteValue32_v2 );
_LIBRARY_FIND( cuda_lib, cuStreamWriteValue64_v2 );
_LIBRARY_FIND( cuda_lib, cuSurfObjectCreate );
_LIBRARY_FIND( cuda_lib, cuSurfObjectDestroy );
_LIBRARY_FIND( cuda_lib, cuSurfObjectGetResourceDesc );
_LIBRARY_FIND( cuda_lib, cuSurfRefGetArray );
_LIBRARY_FIND( cuda_lib, cuSurfRefSetArray );
_LIBRARY_FIND( cuda_lib, cuTensorMapEncodeIm2col );
_LIBRARY_FIND( cuda_lib, cuTensorMapEncodeTiled );
_LIBRARY_FIND( cuda_lib, cuTensorMapReplaceAddress );
_LIBRARY_FIND( cuda_lib, cuTexObjectCreate );
_LIBRARY_FIND( cuda_lib, cuTexObjectDestroy );
_LIBRARY_FIND( cuda_lib, cuTexObjectGetResourceDesc );
_LIBRARY_FIND( cuda_lib, cuTexObjectGetResourceViewDesc );
_LIBRARY_FIND( cuda_lib, cuTexObjectGetTextureDesc );
_LIBRARY_FIND( cuda_lib, cuTexRefCreate );
_LIBRARY_FIND( cuda_lib, cuTexRefDestroy );
_LIBRARY_FIND( cuda_lib, cuTexRefGetAddressMode );
_LIBRARY_FIND( cuda_lib, cuTexRefGetAddress_v2 );
_LIBRARY_FIND( cuda_lib, cuTexRefGetArray );
_LIBRARY_FIND( cuda_lib, cuTexRefGetBorderColor );
_LIBRARY_FIND( cuda_lib, cuTexRefGetFilterMode );
_LIBRARY_FIND( cuda_lib, cuTexRefGetFlags );
_LIBRARY_FIND( cuda_lib, cuTexRefGetFormat );
_LIBRARY_FIND( cuda_lib, cuTexRefGetMaxAnisotropy );
_LIBRARY_FIND( cuda_lib, cuTexRefGetMipmapFilterMode );
_LIBRARY_FIND( cuda_lib, cuTexRefGetMipmapLevelBias );
_LIBRARY_FIND( cuda_lib, cuTexRefGetMipmapLevelClamp );
_LIBRARY_FIND( cuda_lib, cuTexRefGetMipmappedArray );
_LIBRARY_FIND( cuda_lib, cuTexRefSetAddress2D_v3 );
_LIBRARY_FIND( cuda_lib, cuTexRefSetAddressMode );
_LIBRARY_FIND( cuda_lib, cuTexRefSetAddress_v2 );
_LIBRARY_FIND( cuda_lib, cuTexRefSetArray );
_LIBRARY_FIND( cuda_lib, cuTexRefSetBorderColor );
_LIBRARY_FIND( cuda_lib, cuTexRefSetFilterMode );
_LIBRARY_FIND( cuda_lib, cuTexRefSetFlags );
_LIBRARY_FIND( cuda_lib, cuTexRefSetFormat );
_LIBRARY_FIND( cuda_lib, cuTexRefSetMaxAnisotropy );
_LIBRARY_FIND( cuda_lib, cuTexRefSetMipmapFilterMode );
_LIBRARY_FIND( cuda_lib, cuTexRefSetMipmapLevelBias );
_LIBRARY_FIND( cuda_lib, cuTexRefSetMipmapLevelClamp );
_LIBRARY_FIND( cuda_lib, cuTexRefSetMipmappedArray );
_LIBRARY_FIND( cuda_lib, cuThreadExchangeStreamCaptureMode );
_LIBRARY_FIND( cuda_lib, cuUserObjectCreate );
_LIBRARY_FIND( cuda_lib, cuUserObjectRelease );
_LIBRARY_FIND( cuda_lib, cuUserObjectRetain );
_LIBRARY_FIND( cuda_lib, cuWaitExternalSemaphoresAsync );
_LIBRARY_FIND( cudart_lib, cudaArrayGetInfo );
_LIBRARY_FIND( cudart_lib, cudaArrayGetMemoryRequirements );
_LIBRARY_FIND( cudart_lib, cudaArrayGetPlane );
_LIBRARY_FIND( cudart_lib, cudaArrayGetSparseProperties );
_LIBRARY_FIND( cudart_lib, cudaChooseDevice );
_LIBRARY_FIND( cudart_lib, cudaCreateChannelDesc );
_LIBRARY_FIND( cudart_lib, cudaCreateSurfaceObject );
_LIBRARY_FIND( cudart_lib, cudaCreateTextureObject );
_LIBRARY_FIND( cudart_lib, cudaCtxResetPersistingL2Cache );
_LIBRARY_FIND( cudart_lib, cudaDestroyExternalMemory );
_LIBRARY_FIND( cudart_lib, cudaDestroyExternalSemaphore );
_LIBRARY_FIND( cudart_lib, cudaDestroySurfaceObject );
_LIBRARY_FIND( cudart_lib, cudaDestroyTextureObject );
_LIBRARY_FIND( cudart_lib, cudaDeviceCanAccessPeer );
_LIBRARY_FIND( cudart_lib, cudaDeviceDisablePeerAccess );
_LIBRARY_FIND( cudart_lib, cudaDeviceEnablePeerAccess );
_LIBRARY_FIND( cudart_lib, cudaDeviceFlushGPUDirectRDMAWrites );
_LIBRARY_FIND( cudart_lib, cudaDeviceGetAttribute );
_LIBRARY_FIND( cudart_lib, cudaDeviceGetByPCIBusId );
_LIBRARY_FIND( cudart_lib, cudaDeviceGetCacheConfig );
_LIBRARY_FIND( cudart_lib, cudaDeviceGetDefaultMemPool );
_LIBRARY_FIND( cudart_lib, cudaDeviceGetGraphMemAttribute );
_LIBRARY_FIND( cudart_lib, cudaDeviceGetLimit );
_LIBRARY_FIND( cudart_lib, cudaDeviceGetMemPool );
// DLL not found for: cudaDeviceGetNvSciSyncAttributes
_LIBRARY_FIND( cudart_lib, cudaDeviceGetP2PAttribute );
_LIBRARY_FIND( cudart_lib, cudaDeviceGetPCIBusId );
_LIBRARY_FIND( cudart_lib, cudaDeviceGetSharedMemConfig );
_LIBRARY_FIND( cudart_lib, cudaDeviceGetStreamPriorityRange );
_LIBRARY_FIND( cudart_lib, cudaDeviceGetTexture1DLinearMaxWidth );
_LIBRARY_FIND( cudart_lib, cudaDeviceGraphMemTrim );
_LIBRARY_FIND( cudart_lib, cudaDeviceReset );
_LIBRARY_FIND( cudart_lib, cudaDeviceSetCacheConfig );
_LIBRARY_FIND( cudart_lib, cudaDeviceSetGraphMemAttribute );
_LIBRARY_FIND( cudart_lib, cudaDeviceSetLimit );
_LIBRARY_FIND( cudart_lib, cudaDeviceSetMemPool );
_LIBRARY_FIND( cudart_lib, cudaDeviceSetSharedMemConfig );
_LIBRARY_FIND( cudart_lib, cudaDeviceSynchronize );
_LIBRARY_FIND( cudart_lib, cudaDriverGetVersion );
_LIBRARY_FIND( cudart_lib, cudaEventCreate );
_LIBRARY_FIND( cudart_lib, cudaEventCreateWithFlags );
_LIBRARY_FIND( cudart_lib, cudaEventDestroy );
_LIBRARY_FIND( cudart_lib, cudaEventElapsedTime );
_LIBRARY_FIND( cudart_lib, cudaEventQuery );
_LIBRARY_FIND( cudart_lib, cudaEventRecord );
_LIBRARY_FIND( cudart_lib, cudaEventRecordWithFlags );
_LIBRARY_FIND( cudart_lib, cudaEventSynchronize );
_LIBRARY_FIND( cudart_lib, cudaExternalMemoryGetMappedBuffer );
_LIBRARY_FIND( cudart_lib, cudaExternalMemoryGetMappedMipmappedArray );
_LIBRARY_FIND( cudart_lib, cudaFree );
_LIBRARY_FIND( cudart_lib, cudaFreeArray );
_LIBRARY_FIND( cudart_lib, cudaFreeAsync );
_LIBRARY_FIND( cudart_lib, cudaFreeHost );
_LIBRARY_FIND( cudart_lib, cudaFreeMipmappedArray );
_LIBRARY_FIND( cudart_lib, cudaFuncGetAttributes );
_LIBRARY_FIND( cudart_lib, cudaFuncSetAttribute );
_LIBRARY_FIND( cudart_lib, cudaFuncSetCacheConfig );
_LIBRARY_FIND( cudart_lib, cudaFuncSetSharedMemConfig );
_LIBRARY_FIND( cudart_lib, cudaGetChannelDesc );
_LIBRARY_FIND( cudart_lib, cudaGetDevice );
_LIBRARY_FIND( cudart_lib, cudaGetDeviceCount );
_LIBRARY_FIND( cudart_lib, cudaGetDeviceFlags );
_LIBRARY_FIND( cudart_lib, cudaGetDeviceProperties_v2 );
_LIBRARY_FIND( cudart_lib, cudaGetDriverEntryPoint );
_LIBRARY_FIND( cudart_lib, cudaGetErrorName );
_LIBRARY_FIND( cudart_lib, cudaGetErrorString );
_LIBRARY_FIND( cudart_lib, cudaGetExportTable );
_LIBRARY_FIND( cudart_lib, cudaGetFuncBySymbol );
_LIBRARY_FIND( cudart_lib, cudaGetKernel );
_LIBRARY_FIND( cudart_lib, cudaGetLastError );
_LIBRARY_FIND( cudart_lib, cudaGetMipmappedArrayLevel );
_LIBRARY_FIND( cudart_lib, cudaGetSurfaceObjectResourceDesc );
_LIBRARY_FIND( cudart_lib, cudaGetSymbolAddress );
_LIBRARY_FIND( cudart_lib, cudaGetSymbolSize );
_LIBRARY_FIND( cudart_lib, cudaGetTextureObjectResourceDesc );
_LIBRARY_FIND( cudart_lib, cudaGetTextureObjectResourceViewDesc );
_LIBRARY_FIND( cudart_lib, cudaGetTextureObjectTextureDesc );
_LIBRARY_FIND( cudart_lib, cudaGraphAddChildGraphNode );
_LIBRARY_FIND( cudart_lib, cudaGraphAddDependencies );
_LIBRARY_FIND( cudart_lib, cudaGraphAddEmptyNode );
_LIBRARY_FIND( cudart_lib, cudaGraphAddEventRecordNode );
_LIBRARY_FIND( cudart_lib, cudaGraphAddEventWaitNode );
_LIBRARY_FIND( cudart_lib, cudaGraphAddExternalSemaphoresSignalNode );
_LIBRARY_FIND( cudart_lib, cudaGraphAddExternalSemaphoresWaitNode );
_LIBRARY_FIND( cudart_lib, cudaGraphAddHostNode );
_LIBRARY_FIND( cudart_lib, cudaGraphAddKernelNode );
_LIBRARY_FIND( cudart_lib, cudaGraphAddMemAllocNode );
_LIBRARY_FIND( cudart_lib, cudaGraphAddMemFreeNode );
_LIBRARY_FIND( cudart_lib, cudaGraphAddMemcpyNode );
_LIBRARY_FIND( cudart_lib, cudaGraphAddMemcpyNode1D );
_LIBRARY_FIND( cudart_lib, cudaGraphAddMemcpyNodeFromSymbol );
_LIBRARY_FIND( cudart_lib, cudaGraphAddMemcpyNodeToSymbol );
_LIBRARY_FIND( cudart_lib, cudaGraphAddMemsetNode );
_LIBRARY_FIND( cudart_lib, cudaGraphAddNode );
_LIBRARY_FIND( cudart_lib, cudaGraphChildGraphNodeGetGraph );
_LIBRARY_FIND( cudart_lib, cudaGraphClone );
_LIBRARY_FIND( cudart_lib, cudaGraphCreate );
_LIBRARY_FIND( cudart_lib, cudaGraphDebugDotPrint );
_LIBRARY_FIND( cudart_lib, cudaGraphDestroy );
_LIBRARY_FIND( cudart_lib, cudaGraphDestroyNode );
_LIBRARY_FIND( cudart_lib, cudaGraphEventRecordNodeGetEvent );
_LIBRARY_FIND( cudart_lib, cudaGraphEventRecordNodeSetEvent );
_LIBRARY_FIND( cudart_lib, cudaGraphEventWaitNodeGetEvent );
_LIBRARY_FIND( cudart_lib, cudaGraphEventWaitNodeSetEvent );
_LIBRARY_FIND( cudart_lib, cudaGraphExecChildGraphNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphExecDestroy );
_LIBRARY_FIND( cudart_lib, cudaGraphExecEventRecordNodeSetEvent );
_LIBRARY_FIND( cudart_lib, cudaGraphExecEventWaitNodeSetEvent );
_LIBRARY_FIND( cudart_lib, cudaGraphExecExternalSemaphoresSignalNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphExecExternalSemaphoresWaitNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphExecGetFlags );
_LIBRARY_FIND( cudart_lib, cudaGraphExecHostNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphExecKernelNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphExecMemcpyNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphExecMemcpyNodeSetParams1D );
_LIBRARY_FIND( cudart_lib, cudaGraphExecMemcpyNodeSetParamsFromSymbol );
_LIBRARY_FIND( cudart_lib, cudaGraphExecMemcpyNodeSetParamsToSymbol );
_LIBRARY_FIND( cudart_lib, cudaGraphExecMemsetNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphExecNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphExecUpdate );
_LIBRARY_FIND( cudart_lib, cudaGraphExternalSemaphoresSignalNodeGetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphExternalSemaphoresSignalNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphExternalSemaphoresWaitNodeGetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphExternalSemaphoresWaitNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphGetEdges );
_LIBRARY_FIND( cudart_lib, cudaGraphGetNodes );
_LIBRARY_FIND( cudart_lib, cudaGraphGetRootNodes );
_LIBRARY_FIND( cudart_lib, cudaGraphHostNodeGetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphHostNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphInstantiate );
_LIBRARY_FIND( cudart_lib, cudaGraphInstantiateWithFlags );
_LIBRARY_FIND( cudart_lib, cudaGraphInstantiateWithParams );
_LIBRARY_FIND( cudart_lib, cudaGraphKernelNodeCopyAttributes );
_LIBRARY_FIND( cudart_lib, cudaGraphKernelNodeGetAttribute );
_LIBRARY_FIND( cudart_lib, cudaGraphKernelNodeGetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphKernelNodeSetAttribute );
_LIBRARY_FIND( cudart_lib, cudaGraphKernelNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphLaunch );
_LIBRARY_FIND( cudart_lib, cudaGraphMemAllocNodeGetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphMemFreeNodeGetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphMemcpyNodeGetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphMemcpyNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphMemcpyNodeSetParams1D );
_LIBRARY_FIND( cudart_lib, cudaGraphMemcpyNodeSetParamsFromSymbol );
_LIBRARY_FIND( cudart_lib, cudaGraphMemcpyNodeSetParamsToSymbol );
_LIBRARY_FIND( cudart_lib, cudaGraphMemsetNodeGetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphMemsetNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphNodeFindInClone );
_LIBRARY_FIND( cudart_lib, cudaGraphNodeGetDependencies );
_LIBRARY_FIND( cudart_lib, cudaGraphNodeGetDependentNodes );
_LIBRARY_FIND( cudart_lib, cudaGraphNodeGetEnabled );
_LIBRARY_FIND( cudart_lib, cudaGraphNodeGetType );
_LIBRARY_FIND( cudart_lib, cudaGraphNodeSetEnabled );
_LIBRARY_FIND( cudart_lib, cudaGraphNodeSetParams );
_LIBRARY_FIND( cudart_lib, cudaGraphReleaseUserObject );
_LIBRARY_FIND( cudart_lib, cudaGraphRemoveDependencies );
_LIBRARY_FIND( cudart_lib, cudaGraphRetainUserObject );
_LIBRARY_FIND( cudart_lib, cudaGraphUpload );
_LIBRARY_FIND( cudart_lib, cudaGraphicsMapResources );
_LIBRARY_FIND( cudart_lib, cudaGraphicsResourceGetMappedMipmappedArray );
_LIBRARY_FIND( cudart_lib, cudaGraphicsResourceGetMappedPointer );
_LIBRARY_FIND( cudart_lib, cudaGraphicsResourceSetMapFlags );
_LIBRARY_FIND( cudart_lib, cudaGraphicsSubResourceGetMappedArray );
_LIBRARY_FIND( cudart_lib, cudaGraphicsUnmapResources );
_LIBRARY_FIND( cudart_lib, cudaGraphicsUnregisterResource );
_LIBRARY_FIND( cudart_lib, cudaHostAlloc );
_LIBRARY_FIND( cudart_lib, cudaHostGetDevicePointer );
_LIBRARY_FIND( cudart_lib, cudaHostGetFlags );
_LIBRARY_FIND( cudart_lib, cudaHostRegister );
_LIBRARY_FIND( cudart_lib, cudaHostUnregister );
_LIBRARY_FIND( cudart_lib, cudaImportExternalMemory );
_LIBRARY_FIND( cudart_lib, cudaImportExternalSemaphore );
_LIBRARY_FIND( cudart_lib, cudaInitDevice );
_LIBRARY_FIND( cudart_lib, cudaIpcCloseMemHandle );
_LIBRARY_FIND( cudart_lib, cudaIpcGetEventHandle );
_LIBRARY_FIND( cudart_lib, cudaIpcGetMemHandle );
_LIBRARY_FIND( cudart_lib, cudaIpcOpenEventHandle );
_LIBRARY_FIND( cudart_lib, cudaIpcOpenMemHandle );
_LIBRARY_FIND( cudart_lib, cudaLaunchCooperativeKernel );
_LIBRARY_FIND( cudart_lib, cudaLaunchCooperativeKernelMultiDevice );
_LIBRARY_FIND( cudart_lib, cudaLaunchHostFunc );
_LIBRARY_FIND( cudart_lib, cudaLaunchKernel );
_LIBRARY_FIND( cudart_lib, cudaLaunchKernelExC );
_LIBRARY_FIND( cudart_lib, cudaMalloc );
_LIBRARY_FIND( cudart_lib, cudaMalloc3D );
_LIBRARY_FIND( cudart_lib, cudaMalloc3DArray );
_LIBRARY_FIND( cudart_lib, cudaMallocArray );
_LIBRARY_FIND( cudart_lib, cudaMallocAsync );
_LIBRARY_FIND( cudart_lib, cudaMallocFromPoolAsync );
_LIBRARY_FIND( cudart_lib, cudaMallocHost );
_LIBRARY_FIND( cudart_lib, cudaMallocManaged );
_LIBRARY_FIND( cudart_lib, cudaMallocMipmappedArray );
_LIBRARY_FIND( cudart_lib, cudaMallocPitch );
_LIBRARY_FIND( cudart_lib, cudaMemAdvise );
_LIBRARY_FIND( cudart_lib, cudaMemAdvise_v2 );
_LIBRARY_FIND( cudart_lib, cudaMemGetInfo );
_LIBRARY_FIND( cudart_lib, cudaMemPoolCreate );
_LIBRARY_FIND( cudart_lib, cudaMemPoolDestroy );
_LIBRARY_FIND( cudart_lib, cudaMemPoolExportPointer );
_LIBRARY_FIND( cudart_lib, cudaMemPoolExportToShareableHandle );
_LIBRARY_FIND( cudart_lib, cudaMemPoolGetAccess );
_LIBRARY_FIND( cudart_lib, cudaMemPoolGetAttribute );
_LIBRARY_FIND( cudart_lib, cudaMemPoolImportFromShareableHandle );
_LIBRARY_FIND( cudart_lib, cudaMemPoolImportPointer );
_LIBRARY_FIND( cudart_lib, cudaMemPoolSetAccess );
_LIBRARY_FIND( cudart_lib, cudaMemPoolSetAttribute );
_LIBRARY_FIND( cudart_lib, cudaMemPoolTrimTo );
_LIBRARY_FIND( cudart_lib, cudaMemPrefetchAsync );
_LIBRARY_FIND( cudart_lib, cudaMemPrefetchAsync_v2 );
_LIBRARY_FIND( cudart_lib, cudaMemRangeGetAttribute );
_LIBRARY_FIND( cudart_lib, cudaMemRangeGetAttributes );
_LIBRARY_FIND( cudart_lib, cudaMemcpy );
_LIBRARY_FIND( cudart_lib, cudaMemcpy2D );
_LIBRARY_FIND( cudart_lib, cudaMemcpy2DArrayToArray );
_LIBRARY_FIND( cudart_lib, cudaMemcpy2DAsync );
_LIBRARY_FIND( cudart_lib, cudaMemcpy2DFromArray );
_LIBRARY_FIND( cudart_lib, cudaMemcpy2DFromArrayAsync );
_LIBRARY_FIND( cudart_lib, cudaMemcpy2DToArray );
_LIBRARY_FIND( cudart_lib, cudaMemcpy2DToArrayAsync );
_LIBRARY_FIND( cudart_lib, cudaMemcpy3D );
_LIBRARY_FIND( cudart_lib, cudaMemcpy3DAsync );
_LIBRARY_FIND( cudart_lib, cudaMemcpy3DPeer );
_LIBRARY_FIND( cudart_lib, cudaMemcpy3DPeerAsync );
_LIBRARY_FIND( cudart_lib, cudaMemcpyArrayToArray );
_LIBRARY_FIND( cudart_lib, cudaMemcpyAsync );
_LIBRARY_FIND( cudart_lib, cudaMemcpyFromArray );
_LIBRARY_FIND( cudart_lib, cudaMemcpyFromArrayAsync );
_LIBRARY_FIND( cudart_lib, cudaMemcpyFromSymbol );
_LIBRARY_FIND( cudart_lib, cudaMemcpyFromSymbolAsync );
_LIBRARY_FIND( cudart_lib, cudaMemcpyPeer );
_LIBRARY_FIND( cudart_lib, cudaMemcpyPeerAsync );
_LIBRARY_FIND( cudart_lib, cudaMemcpyToArray );
_LIBRARY_FIND( cudart_lib, cudaMemcpyToArrayAsync );
_LIBRARY_FIND( cudart_lib, cudaMemcpyToSymbol );
_LIBRARY_FIND( cudart_lib, cudaMemcpyToSymbolAsync );
_LIBRARY_FIND( cudart_lib, cudaMemset );
_LIBRARY_FIND( cudart_lib, cudaMemset2D );
_LIBRARY_FIND( cudart_lib, cudaMemset2DAsync );
_LIBRARY_FIND( cudart_lib, cudaMemset3D );
_LIBRARY_FIND( cudart_lib, cudaMemset3DAsync );
_LIBRARY_FIND( cudart_lib, cudaMemsetAsync );
_LIBRARY_FIND( cudart_lib, cudaMipmappedArrayGetMemoryRequirements );
_LIBRARY_FIND( cudart_lib, cudaMipmappedArrayGetSparseProperties );
_LIBRARY_FIND( cudart_lib, cudaOccupancyAvailableDynamicSMemPerBlock );
_LIBRARY_FIND( cudart_lib, cudaOccupancyMaxActiveBlocksPerMultiprocessor );
_LIBRARY_FIND( cudart_lib, cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags );
_LIBRARY_FIND( cudart_lib, cudaOccupancyMaxActiveClusters );
_LIBRARY_FIND( cudart_lib, cudaOccupancyMaxPotentialClusterSize );
_LIBRARY_FIND( cudart_lib, cudaPeekAtLastError );
_LIBRARY_FIND( cudart_lib, cudaPointerGetAttributes );
_LIBRARY_FIND( cudart_lib, cudaProfilerStart );
_LIBRARY_FIND( cudart_lib, cudaProfilerStop );
_LIBRARY_FIND( cudart_lib, cudaRuntimeGetVersion );
_LIBRARY_FIND( cudart_lib, cudaSetDevice );
_LIBRARY_FIND( cudart_lib, cudaSetDeviceFlags );
_LIBRARY_FIND( cudart_lib, cudaSetDoubleForDevice );
_LIBRARY_FIND( cudart_lib, cudaSetDoubleForHost );
_LIBRARY_FIND( cudart_lib, cudaSetValidDevices );
_LIBRARY_FIND( cudart_lib, cudaSignalExternalSemaphoresAsync_v2 );
_LIBRARY_FIND( cudart_lib, cudaStreamAddCallback );
_LIBRARY_FIND( cudart_lib, cudaStreamAttachMemAsync );
_LIBRARY_FIND( cudart_lib, cudaStreamBeginCapture );
_LIBRARY_FIND( cudart_lib, cudaStreamCopyAttributes );
_LIBRARY_FIND( cudart_lib, cudaStreamCreate );
_LIBRARY_FIND( cudart_lib, cudaStreamCreateWithFlags );
_LIBRARY_FIND( cudart_lib, cudaStreamCreateWithPriority );
_LIBRARY_FIND( cudart_lib, cudaStreamDestroy );
_LIBRARY_FIND( cudart_lib, cudaStreamEndCapture );
_LIBRARY_FIND( cudart_lib, cudaStreamGetAttribute );
_LIBRARY_FIND( cudart_lib, cudaStreamGetCaptureInfo_v2 );
_LIBRARY_FIND( cudart_lib, cudaStreamGetFlags );
_LIBRARY_FIND( cudart_lib, cudaStreamGetId );
_LIBRARY_FIND( cudart_lib, cudaStreamGetPriority );
_LIBRARY_FIND( cudart_lib, cudaStreamIsCapturing );
_LIBRARY_FIND( cudart_lib, cudaStreamQuery );
_LIBRARY_FIND( cudart_lib, cudaStreamSetAttribute );
_LIBRARY_FIND( cudart_lib, cudaStreamSynchronize );
_LIBRARY_FIND( cudart_lib, cudaStreamUpdateCaptureDependencies );
_LIBRARY_FIND( cudart_lib, cudaStreamWaitEvent );
_LIBRARY_FIND( cudart_lib, cudaThreadExchangeStreamCaptureMode );
_LIBRARY_FIND( cudart_lib, cudaThreadExit );
_LIBRARY_FIND( cudart_lib, cudaThreadGetCacheConfig );
_LIBRARY_FIND( cudart_lib, cudaThreadGetLimit );
_LIBRARY_FIND( cudart_lib, cudaThreadSetCacheConfig );
_LIBRARY_FIND( cudart_lib, cudaThreadSetLimit );
_LIBRARY_FIND( cudart_lib, cudaThreadSynchronize );
_LIBRARY_FIND( cudart_lib, cudaUserObjectCreate );
_LIBRARY_FIND( cudart_lib, cudaUserObjectRelease );
_LIBRARY_FIND( cudart_lib, cudaUserObjectRetain );
_LIBRARY_FIND( cudart_lib, cudaWaitExternalSemaphoresAsync_v2 );


///// END REGION: OROCHI_SUMMONER_REGION_cuew_cpp_2
///// (region automatically generated by Orochi Summoner)
#pragma endregion









  result = CUEW_SUCCESS;
  return result;
}

static void cuewExitNvrtc(void)
{
  if (nvrtc_lib != NULL) {
    /*  Ignore errors. */
    dynamic_library_close(nvrtc_lib);
    nvrtc_lib = NULL;
  }
}

static int cuewNvrtcInit(void)
{
  /* Library paths. */
#ifdef _WIN32
  /* Expected in c:/windows/system or similar, no path needed. */
  const char* nvrtc_paths[] = {"nvrtc64_120_0.dll",
                               "nvrtc64_112_0.dll",
                               "nvrtc64_101_0.dll",
                               "nvrtc64_100_0.dll",
                               "nvrtc64_91.dll",
                               "nvrtc64_90.dll",
                               "nvrtc64_80.dll",
                               NULL};
#elif defined(__APPLE__)
  /* Default installation path. */
  const char *nvrtc_paths[] = {"/usr/local/cuda/lib/libnvrtc.dylib", NULL};
#else
  const char *nvrtc_paths[] = {
    "libnvrtc.so",
#  if defined(__x86_64__) || defined(_M_X64)
    "/usr/local/cuda/lib64/libnvrtc.so",
#  else
    "/usr/local/cuda/lib/libnvrtc.so",
#  endif
    NULL
  };
#endif
  static int initialized = 0;
  static int result = 0;
  int error;

  if (initialized) {
    return result;
  }

  initialized = 1;

  error = atexit(cuewExitNvrtc);
  if (error) {
    result = CUEW_ERROR_ATEXIT_FAILED;
    return result;
  }

  /* Load library. */
  nvrtc_lib = dynamic_library_open_find(nvrtc_paths);

  if (nvrtc_lib == NULL) {
    result = CUEW_ERROR_OPEN_FAILED;
    return result;
  }

#pragma region OROCHI_SUMMONER_REGION_cuew_cpp_rtc

/////
///// THIS REGION HAS BEEN AUTOMATICALLY GENERATED BY OROCHI SUMMONER.
///// Manual modification of this region is not recommended.
/////

_LIBRARY_FIND( nvrtc_lib, nvrtcAddNameExpression );
_LIBRARY_FIND( nvrtc_lib, nvrtcCompileProgram );
_LIBRARY_FIND( nvrtc_lib, nvrtcCreateProgram );
_LIBRARY_FIND( nvrtc_lib, nvrtcDestroyProgram );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetCUBIN );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetCUBINSize );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetErrorString );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetLTOIR );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetLTOIRSize );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetLoweredName );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetNVVM );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetNVVMSize );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetNumSupportedArchs );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetOptiXIR );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetOptiXIRSize );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetPTX );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetPTXSize );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetProgramLog );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetProgramLogSize );
_LIBRARY_FIND( nvrtc_lib, nvrtcGetSupportedArchs );
_LIBRARY_FIND( nvrtc_lib, nvrtcVersion );


///// END REGION: OROCHI_SUMMONER_REGION_cuew_cpp_rtc
///// (region automatically generated by Orochi Summoner)
#pragma endregion

  result = CUEW_SUCCESS;
  return result;
}

void cuewInit( int* resultDriver, int* resultRtc, cuuint32_t flags )
{
  *resultDriver = CUEW_NOT_INITIALIZED;
  *resultRtc = CUEW_NOT_INITIALIZED;

  if (flags & CUEW_INIT_CUDA) {
    *resultDriver = cuewCudaInit();
  }
  if (flags & CUEW_INIT_NVRTC) {
    *resultRtc = cuewNvrtcInit();
  }
}

const char *cuewErrorString(CUresult result)
{
  switch (result) {
    case CUDA_SUCCESS:
      return "No errors";
    case CUDA_ERROR_INVALID_VALUE:
      return "Invalid value";
    case CUDA_ERROR_OUT_OF_MEMORY:
      return "Out of memory";
    case CUDA_ERROR_NOT_INITIALIZED:
      return "Driver not initialized";
    case CUDA_ERROR_DEINITIALIZED:
      return "Driver deinitialized";
    case CUDA_ERROR_PROFILER_DISABLED:
      return "Profiler disabled";
    case CUDA_ERROR_PROFILER_NOT_INITIALIZED:
      return "Profiler not initialized";
    case CUDA_ERROR_PROFILER_ALREADY_STARTED:
      return "Profiler already started";
    case CUDA_ERROR_PROFILER_ALREADY_STOPPED:
      return "Profiler already stopped";
    case CUDA_ERROR_NO_DEVICE:
      return "No CUDA-capable device available";
    case CUDA_ERROR_INVALID_DEVICE:
      return "Invalid device";
    case CUDA_ERROR_INVALID_IMAGE:
      return "Invalid kernel image";
    case CUDA_ERROR_INVALID_CONTEXT:
      return "Invalid context";
    case CUDA_ERROR_CONTEXT_ALREADY_CURRENT:
      return "Context already current";
    case CUDA_ERROR_MAP_FAILED:
      return "Map failed";
    case CUDA_ERROR_UNMAP_FAILED:
      return "Unmap failed";
    case CUDA_ERROR_ARRAY_IS_MAPPED:
      return "Array is mapped";
    case CUDA_ERROR_ALREADY_MAPPED:
      return "Already mapped";
    case CUDA_ERROR_NO_BINARY_FOR_GPU:
      return "No binary for GPU";
    case CUDA_ERROR_ALREADY_ACQUIRED:
      return "Already acquired";
    case CUDA_ERROR_NOT_MAPPED:
      return "Not mapped";
    case CUDA_ERROR_NOT_MAPPED_AS_ARRAY:
      return "Mapped resource not available for access as an array";
    case CUDA_ERROR_NOT_MAPPED_AS_POINTER:
      return "Mapped resource not available for access as a pointer";
    case CUDA_ERROR_ECC_UNCORRECTABLE:
      return "Uncorrectable ECC error detected";
    case CUDA_ERROR_UNSUPPORTED_LIMIT:
      return "CUlimit not supported by device";
    case CUDA_ERROR_CONTEXT_ALREADY_IN_USE:
      return "Context already in use";
    case CUDA_ERROR_PEER_ACCESS_UNSUPPORTED:
      return "Peer access unsupported";
    case CUDA_ERROR_INVALID_PTX:
      return "Invalid ptx";
    case CUDA_ERROR_INVALID_GRAPHICS_CONTEXT:
      return "Invalid graphics context";
    case CUDA_ERROR_NVLINK_UNCORRECTABLE:
      return "Nvlink uncorrectable";
    case CUDA_ERROR_JIT_COMPILER_NOT_FOUND:
      return "Jit compiler not found";
    case CUDA_ERROR_UNSUPPORTED_PTX_VERSION:
      return "Unsupported PTX version";
    case CUDA_ERROR_INVALID_SOURCE:
      return "Invalid source";
    case CUDA_ERROR_FILE_NOT_FOUND:
      return "File not found";
    case CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND:
      return "Link to a shared object failed to resolve";
    case CUDA_ERROR_SHARED_OBJECT_INIT_FAILED:
      return "Shared object initialization failed";
    case CUDA_ERROR_OPERATING_SYSTEM:
      return "Operating system";
    case CUDA_ERROR_INVALID_HANDLE:
      return "Invalid handle";
    case CUDA_ERROR_NOT_FOUND:
      return "Not found";
    case CUDA_ERROR_NOT_READY:
      return "CUDA not ready";
    case CUDA_ERROR_ILLEGAL_ADDRESS:
      return "Illegal address";
    case CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES:
      return "Launch exceeded resources";
    case CUDA_ERROR_LAUNCH_TIMEOUT:
      return "Launch exceeded timeout";
    case CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING:
      return "Launch with incompatible texturing";
    case CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED:
      return "Peer access already enabled";
    case CUDA_ERROR_PEER_ACCESS_NOT_ENABLED:
      return "Peer access not enabled";
    case CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE:
      return "Primary context active";
    case CUDA_ERROR_CONTEXT_IS_DESTROYED:
      return "Context is destroyed";
    case CUDA_ERROR_ASSERT:
      return "Assert";
    case CUDA_ERROR_TOO_MANY_PEERS:
      return "Too many peers";
    case CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED:
      return "Host memory already registered";
    case CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED:
      return "Host memory not registered";
    case CUDA_ERROR_HARDWARE_STACK_ERROR:
      return "Hardware stack error";
    case CUDA_ERROR_ILLEGAL_INSTRUCTION:
      return "Illegal instruction";
    case CUDA_ERROR_MISALIGNED_ADDRESS:
      return "Misaligned address";
    case CUDA_ERROR_INVALID_ADDRESS_SPACE:
      return "Invalid address space";
    case CUDA_ERROR_INVALID_PC:
      return "Invalid pc";
    case CUDA_ERROR_LAUNCH_FAILED:
      return "Launch failed";
    case CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE:
      return "Cooperative launch too large";
    case CUDA_ERROR_NOT_PERMITTED:
      return "Not permitted";
    case CUDA_ERROR_NOT_SUPPORTED:
      return "Not supported";
    case CUDA_ERROR_UNKNOWN:
      return "Unknown error";
    default:
      return "Unknown CUDA error value";
  }
}

static void path_join(const char *path1, const char *path2, int maxlen, char *result)
{
#if defined(WIN32) || defined(_WIN32)
  const char separator = '\\';
#else
  const char separator = '/';
#endif
  int n = snprintf(result, maxlen, "%s%c%s", path1, separator, path2);
  if (n != -1 && n < maxlen) {
    result[n] = '\0';
  }
  else {
    result[maxlen - 1] = '\0';
  }
}

static int path_exists(const char *path)
{
  struct stat st;
  if (stat(path, &st)) {
    return 0;
  }
  return 1;
}

const char *cuewCompilerPath(void)
{
#ifdef _WIN32
  const char *defaultpaths[] = {
      "C:/CUDA/bin", "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin", NULL};
  const char *executable = "nvcc.exe";
#else
  const char *defaultpaths[] = {"/Developer/NVIDIA/CUDA-5.0/bin",
                                "/usr/local/cuda-5.0/bin",
                                "/usr/local/cuda/bin",
                                "/Developer/NVIDIA/CUDA-6.0/bin",
                                "/usr/local/cuda-6.0/bin",
                                "/Developer/NVIDIA/CUDA-5.5/bin",
                                "/usr/local/cuda-5.5/bin",
                                NULL};
  const char *executable = "nvcc";
#endif
  int i;

  const char *binpath = getenv("CUDA_BIN_PATH");

  static char nvcc[65536];

  if (binpath) {
    path_join(binpath, executable, sizeof(nvcc), nvcc);
    if (path_exists(nvcc)) {
      return nvcc;
    }
  }

  for (i = 0; defaultpaths[i]; ++i) {
    path_join(defaultpaths[i], executable, sizeof(nvcc), nvcc);
    if (path_exists(nvcc)) {
      return nvcc;
    }
  }

  {
#ifdef _WIN32
    FILE *handle = popen("where nvcc", "r");
#else
    FILE *handle = popen("which nvcc", "r");
#endif
    if (handle) {
      char buffer[4096] = {0};
      size_t elementSize = 1;
      size_t elementCount = sizeof(buffer) - 1;
      size_t len = fread(buffer, elementSize, elementCount, handle);
      buffer[len] = '\0';
      pclose(handle);
      if (buffer[0]) {
        return "nvcc";
      }
    }
  }

  return NULL;
}

int cuewNvrtcVersion(void)
{
  int major, minor;
  if (nvrtcVersion) {
    nvrtcVersion(&major, &minor);
    return 10 * major + minor;
  }
  return 0;
}

int cuewCompilerVersion(void)
{
  const char *path = cuewCompilerPath();
  const char *marker = "Cuda compilation tools, release ";
  FILE *pipe;
  int major, minor;
  char *versionstr;
  char buf[128];
  char output[65536] = "\0";
  char command[65536] = "\0";

  if (path == NULL) {
    return 0;
  }

  /* get --version output */
  strcat(command, "\"");
  strncat(command, path, sizeof(command) - 1);
  strncat(command, "\" --version", sizeof(command) - strlen(path) - 1);
  pipe = popen(command, "r");
  if (!pipe) {
    fprintf(stderr, "CUDA: failed to run compiler to retrieve version");
    return 0;
  }

  while (!feof(pipe)) {
    if (fgets(buf, sizeof(buf), pipe) != NULL) {
      strncat(output, buf, sizeof(output) - strlen(output) - 1);
    }
  }

  pclose(pipe);

  /* parse version number */
  versionstr = strstr(output, marker);
  if (versionstr == NULL) {
    fprintf(stderr, "CUDA: failed to find version number in:\n\n%s\n", output);
    return 0;
  }
  versionstr += strlen(marker);

  if (sscanf(versionstr, "%d.%d", &major, &minor) < 2) {
    fprintf(stderr, "CUDA: failed to parse version number from:\n\n%s\n", output);
    return 0;
  }

  return 10 * major + minor;
}


#endif // OROCHI_CUEW_DEFINED

